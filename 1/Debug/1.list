
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007664  08007664  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800766c  0800766c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  08007680  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08007680  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b25  00000000  00000000  00031501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00034ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b64  00000000  00000000  00035c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013967  00000000  00000000  000597e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7f0  00000000  00000000  0006d14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  0013c98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007550 	.word	0x08007550

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007550 	.word	0x08007550

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050e:	f000 fb7d 	bl	8000c0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000512:	f000 f8bb 	bl	800068c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000516:	f000 f96f 	bl	80007f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800051a:	f000 f943 	bl	80007a4 <MX_USART2_UART_Init>
	MX_SDIO_SD_Init();
 800051e:	f000 f921 	bl	8000764 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8000522:	f004 fcbd 	bl	8004ea0 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	HAL_FLASH_Unlock();
 8000526:	f000 fd75 	bl	8001014 <HAL_FLASH_Unlock>

	//res = HAL_SD_GetState(&hsd);
	//if (res != HAL_SD_STATE_RESET)

	res = f_mount(&fs, "", 1);
 800052a:	2201      	movs	r2, #1
 800052c:	494c      	ldr	r1, [pc, #304]	; (8000660 <main+0x158>)
 800052e:	484d      	ldr	r0, [pc, #308]	; (8000664 <main+0x15c>)
 8000530:	f006 fb9a 	bl	8006c68 <f_mount>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <main+0x160>)
 800053a:	701a      	strb	r2, [r3, #0]
	res = f_open(&fil, "2.bin", FA_READ);
 800053c:	2201      	movs	r2, #1
 800053e:	494b      	ldr	r1, [pc, #300]	; (800066c <main+0x164>)
 8000540:	484b      	ldr	r0, [pc, #300]	; (8000670 <main+0x168>)
 8000542:	f006 fbd7 	bl	8006cf4 <f_open>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b47      	ldr	r3, [pc, #284]	; (8000668 <main+0x160>)
 800054c:	701a      	strb	r2, [r3, #0]

	if (res != FR_OK) // Нет прошивки на SD-карте. Передаем управление другой программе!
 800054e:	4b46      	ldr	r3, [pc, #280]	; (8000668 <main+0x160>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d014      	beq.n	8000580 <main+0x78>
	{
		void (*userapp_reset_handler)(void);
		uint32_t msp_val = *(volatile uint32_t*) FLASH_SECTOR_2_BASE_ADDRESS;
 8000556:	4b47      	ldr	r3, [pc, #284]	; (8000674 <main+0x16c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_DeInit();
 800055c:	f000 fb78 	bl	8000c50 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
 8000564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000566:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f383 8808 	msr	MSP, r3
}
 800056e:	bf00      	nop
		__disable_irq();
		__set_MSP(msp_val);
		uint32_t tmp = *(volatile uint32_t*) (FLASH_SECTOR_2_BASE_ADDRESS + 4);
 8000570:	4b41      	ldr	r3, [pc, #260]	; (8000678 <main+0x170>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	623b      	str	r3, [r7, #32]
		userapp_reset_handler = (void*) tmp;
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	61fb      	str	r3, [r7, #28]
		userapp_reset_handler();
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	4798      	blx	r3
 800057e:	e036      	b.n	80005ee <main+0xe6>
		uint32_t SectorError;

		// Стираем сектор 2

		static FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000580:	4b3e      	ldr	r3, [pc, #248]	; (800067c <main+0x174>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Sector = FLASH_SECTOR_2; // 0x0800 8000 - 0x0800 BFFF
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <main+0x174>)
 8000588:	2202      	movs	r2, #2
 800058a:	609a      	str	r2, [r3, #8]
		EraseInitStruct.NbSectors = 1;
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <main+0x174>)
 800058e:	2201      	movs	r2, #1
 8000590:	60da      	str	r2, [r3, #12]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4619      	mov	r1, r3
 8000596:	4839      	ldr	r0, [pc, #228]	; (800067c <main+0x174>)
 8000598:	f000 feae 	bl	80012f8 <HAL_FLASHEx_Erase>
		{
			// Код выполняемый, если операция очистки памяти окончилась неудачно
		}

		uint32_t adres = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (;;)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005a0:	2120      	movs	r1, #32
 80005a2:	4837      	ldr	r0, [pc, #220]	; (8000680 <main+0x178>)
 80005a4:	f001 f98f 	bl	80018c6 <HAL_GPIO_TogglePin>
			res = f_read(&fil, &readBuffer, 1, &bw);
 80005a8:	4b36      	ldr	r3, [pc, #216]	; (8000684 <main+0x17c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	4936      	ldr	r1, [pc, #216]	; (8000688 <main+0x180>)
 80005ae:	4830      	ldr	r0, [pc, #192]	; (8000670 <main+0x168>)
 80005b0:	f006 fd5e 	bl	8007070 <f_read>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <main+0x160>)
 80005ba:	701a      	strb	r2, [r3, #0]
			if (bw == 0)
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0x17c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <main+0xe4>
			{
				break; /* eof */
			}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80005ca:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <main+0x180>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2200      	movs	r2, #0
 80005d6:	461c      	mov	r4, r3
 80005d8:	4615      	mov	r5, r2
 80005da:	4622      	mov	r2, r4
 80005dc:	462b      	mov	r3, r5
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fcc4 	bl	8000f6c <HAL_FLASH_Program>
					(FLASH_SECTOR_2_BASE_ADDRESS + adres), readBuffer);
			adres += 1;
 80005e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e6:	3301      	adds	r3, #1
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005ea:	e7d9      	b.n	80005a0 <main+0x98>
				break; /* eof */
 80005ec:	bf00      	nop
		}
	}

	HAL_FLASH_Lock();
 80005ee:	f000 fd33 	bl	8001058 <HAL_FLASH_Lock>
	f_close(&fil);
 80005f2:	481f      	ldr	r0, [pc, #124]	; (8000670 <main+0x168>)
 80005f4:	f006 fef9 	bl	80073ea <f_close>
	f_mount(0, "", 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	4919      	ldr	r1, [pc, #100]	; (8000660 <main+0x158>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f006 fb33 	bl	8006c68 <f_mount>

	// Передаем управление другой программе после перезаписи файла с SD-карты во flash микроконтроллера!

	for (int i = 0; i < 10; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
 8000606:	e012      	b.n	800062e <main+0x126>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2120      	movs	r1, #32
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <main+0x178>)
 800060e:	f001 f941 	bl	8001894 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fba0 	bl	8000d58 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	4818      	ldr	r0, [pc, #96]	; (8000680 <main+0x178>)
 800061e:	f001 f939 	bl	8001894 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 fb98 	bl	8000d58 <HAL_Delay>
	for (int i = 0; i < 10; i++)
 8000628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062a:	3301      	adds	r3, #1
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	2b09      	cmp	r3, #9
 8000632:	dde9      	ble.n	8000608 <main+0x100>
	}

	void (*userapp_reset_handler)(void);
	uint32_t msp_val = *(volatile uint32_t*) FLASH_SECTOR_2_BASE_ADDRESS;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <main+0x16c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	61bb      	str	r3, [r7, #24]
	HAL_DeInit();
 800063a:	f000 fb09 	bl	8000c50 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 800063e:	b672      	cpsid	i
}
 8000640:	bf00      	nop
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	f383 8808 	msr	MSP, r3
}
 800064c:	bf00      	nop
	__disable_irq();
	__set_MSP(msp_val);
	uint32_t tmp2 = *(volatile uint32_t*) (FLASH_SECTOR_2_BASE_ADDRESS + 4);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x170>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	617b      	str	r3, [r7, #20]
	userapp_reset_handler = (void*) tmp2;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	613b      	str	r3, [r7, #16]
	userapp_reset_handler();
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4798      	blx	r3

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800065c:	e7fe      	b.n	800065c <main+0x154>
 800065e:	bf00      	nop
 8000660:	08007568 	.word	0x08007568
 8000664:	200000f4 	.word	0x200000f4
 8000668:	20000554 	.word	0x20000554
 800066c:	0800756c 	.word	0x0800756c
 8000670:	20000324 	.word	0x20000324
 8000674:	08008000 	.word	0x08008000
 8000678:	08008004 	.word	0x08008004
 800067c:	2000055c 	.word	0x2000055c
 8000680:	40020000 	.word	0x40020000
 8000684:	20000558 	.word	0x20000558
 8000688:	200000f0 	.word	0x200000f0

0800068c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	; 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f006 ff50 	bl	8007540 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xd0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <SystemClock_Config+0xd0>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xd0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xd4>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000704:	2332      	movs	r3, #50	; 0x32
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 10;
 800070c:	230a      	movs	r3, #10
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff63 	bl	80025e4 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000724:	f000 f8f0 	bl	8000908 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f8d9 	bl	80018fc <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000750:	f000 f8da 	bl	8000908 <Error_Handler>
	}
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SDIO_SD_Init+0x38>)
 800076a:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <MX_SDIO_SD_Init+0x3c>)
 800076c:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SDIO_SD_Init+0x38>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SDIO_SD_Init+0x38>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SDIO_SD_Init+0x38>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SDIO_SD_Init+0x38>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_SDIO_SD_Init+0x38>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 255;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <MX_SDIO_SD_Init+0x38>)
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	20000028 	.word	0x20000028
 80007a0:	40012c00 	.word	0x40012c00

080007a4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f003 fb2b 	bl	8003e36 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80007e6:	f000 f88f 	bl	8000908 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <MX_GPIO_Init+0x104>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a39      	ldr	r2, [pc, #228]	; (80008fc <MX_GPIO_Init+0x104>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_GPIO_Init+0x104>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <MX_GPIO_Init+0x104>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a32      	ldr	r2, [pc, #200]	; (80008fc <MX_GPIO_Init+0x104>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0x104>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_GPIO_Init+0x104>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <MX_GPIO_Init+0x104>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0x104>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_GPIO_Init+0x104>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_GPIO_Init+0x104>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_GPIO_Init+0x104>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_GPIO_Init+0x104>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MX_GPIO_Init+0x104>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_GPIO_Init+0x104>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x108>)
 80008a0:	f000 fff8 	bl	8001894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_GPIO_Init+0x10c>)
 80008bc:	f000 fe3e 	bl	800153c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <MX_GPIO_Init+0x108>)
 80008d8:	f000 fe30 	bl	800153c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDIO_CD_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x10c>)
 80008f0:	f000 fe24 	bl	800153c <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fad6 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0a2      	sub	sp, #136	; 0x88
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	225c      	movs	r2, #92	; 0x5c
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fddb 	bl	8007540 <memset>
  if(hsd->Instance==SDIO)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <HAL_SD_MspInit+0x138>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d17f      	bne.n	8000a94 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000998:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800099e:	2300      	movs	r3, #0
 80009a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f8c2 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80009b2:	f7ff ffa9 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a38      	ldr	r2, [pc, #224]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a31      	ldr	r2, [pc, #196]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_SD_MspInit+0x13c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a26:	2307      	movs	r3, #7
 8000a28:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a42:	4619      	mov	r1, r3
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <HAL_SD_MspInit+0x140>)
 8000a46:	f000 fd79 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000a4a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <HAL_SD_MspInit+0x144>)
 8000a6c:	f000 fd66 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a70:	2304      	movs	r3, #4
 8000a72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a82:	230c      	movs	r3, #12
 8000a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <HAL_SD_MspInit+0x148>)
 8000a90:	f000 fd54 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3788      	adds	r7, #136	; 0x88
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12b      	bne.n	8000b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b26:	f000 fd09 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8c4 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f006 fc87 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc8d 	bl	8000508 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08007674 	.word	0x08007674
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200005d0 	.word	0x200005d0

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f965 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f83c 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe68 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c56:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c72:	f04f 32ff 	mov.w	r2, #4294967295
 8000c76:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c92:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_DeInit+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000c9a:	f000 f805 	bl	8000ca8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f93b 	bl	8000f52 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f911 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000570 	.word	0x20000570

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000570 	.word	0x20000570

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff47 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5c 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb0 	bl	8000ec0 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_FLASH_Program+0x1e>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e03b      	b.n	8001002 <HAL_FLASH_Program+0x96>
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f94:	f000 f870 	bl	8001078 <FLASH_WaitForLastOperation>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d12b      	bne.n	8000ffa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000fa8:	783b      	ldrb	r3, [r7, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f000 f91b 	bl	80011e8 <FLASH_Program_Byte>
 8000fb2:	e016      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d105      	bne.n	8000fc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68b8      	ldr	r0, [r7, #8]
 8000fc0:	f000 f8ee 	bl	80011a0 <FLASH_Program_HalfWord>
 8000fc4:	e00d      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d105      	bne.n	8000fd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	f000 f8c3 	bl	800115c <FLASH_Program_Word>
 8000fd6:	e004      	b.n	8000fe2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f000 f88b 	bl	80010f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe6:	f000 f847 	bl	8001078 <FLASH_WaitForLastOperation>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_FLASH_Program+0xa4>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_FLASH_Program+0xa4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_FLASH_Program+0xa0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000574 	.word	0x20000574
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	da0b      	bge.n	800103e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_FLASH_Unlock+0x3c>)
 800102a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_FLASH_Unlock+0x38>)
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_FLASH_Unlock+0x40>)
 8001030:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_FLASH_Unlock+0x38>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da01      	bge.n	800103e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023c00 	.word	0x40023c00
 8001050:	45670123 	.word	0x45670123
 8001054:	cdef89ab 	.word	0xcdef89ab

08001058 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 8001062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001066:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40023c00 	.word	0x40023c00

08001078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <FLASH_WaitForLastOperation+0x78>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800108a:	f7ff fe59 	bl	8000d40 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001090:	e010      	b.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d00c      	beq.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <FLASH_WaitForLastOperation+0x38>
 80010a0:	f7ff fe4e 	bl	8000d40 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d201      	bcs.n	80010b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e019      	b.n	80010e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e8      	bne.n	8001092 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <FLASH_WaitForLastOperation+0x7c>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010de:	f000 f8a5 	bl	800122c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
  
}  
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000574 	.word	0x20000574
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 800110a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800110e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001116:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800111a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <FLASH_Program_DoubleWord+0x60>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800112e:	f3bf 8f6f 	isb	sy
}
 8001132:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	000a      	movs	r2, r1
 8001142:	2300      	movs	r3, #0
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	3104      	adds	r1, #4
 8001148:	4613      	mov	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023c00 	.word	0x40023c00

0800115c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <FLASH_Program_Word+0x40>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <FLASH_Program_Word+0x40>)
 800116c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001170:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <FLASH_Program_Word+0x40>)
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <FLASH_Program_Word+0x40>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <FLASH_Program_Word+0x40>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <FLASH_Program_Word+0x40>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023c00 	.word	0x40023c00

080011a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <FLASH_Program_HalfWord+0x44>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	801a      	strh	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <FLASH_Program_Byte+0x40>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <FLASH_Program_Byte+0x40>)
 80011fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <FLASH_Program_Byte+0x40>)
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <FLASH_Program_Byte+0x40>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <FLASH_Program_Byte+0x40>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <FLASH_Program_Byte+0x40>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	78fa      	ldrb	r2, [r7, #3]
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 8001246:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 800124a:	2210      	movs	r2, #16
 800124c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 8001264:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 8001268:	2220      	movs	r2, #32
 800126a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 8001282:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 80012a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d009      	beq.n	80012c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 80012be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 80012c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <FLASH_SetErrorCode+0xc8>)
 80012de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <FLASH_SetErrorCode+0xc4>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	60da      	str	r2, [r3, #12]
  }
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	20000574 	.word	0x20000574

080012f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <HAL_FLASHEx_Erase+0xd8>)
 800130c:	7e1b      	ldrb	r3, [r3, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_FLASHEx_Erase+0x1e>
 8001312:	2302      	movs	r3, #2
 8001314:	e058      	b.n	80013c8 <HAL_FLASHEx_Erase+0xd0>
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_FLASHEx_Erase+0xd8>)
 8001318:	2201      	movs	r2, #1
 800131a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800131c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001320:	f7ff feaa 	bl	8001078 <FLASH_WaitForLastOperation>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d148      	bne.n	80013c0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d115      	bne.n	800136a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f000 f844 	bl	80013d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001350:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001354:	f7ff fe90 	bl	8001078 <FLASH_WaitForLastOperation>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_FLASHEx_Erase+0xdc>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_FLASHEx_Erase+0xdc>)
 8001362:	f023 0304 	bic.w	r3, r3, #4
 8001366:	6113      	str	r3, [r2, #16]
 8001368:	e028      	b.n	80013bc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	e01c      	b.n	80013ac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f000 f850 	bl	8001420 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001380:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001384:	f7ff fe78 	bl	8001078 <FLASH_WaitForLastOperation>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_FLASHEx_Erase+0xdc>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_FLASHEx_Erase+0xdc>)
 8001392:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001396:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	601a      	str	r2, [r3, #0]
          break;
 80013a4:	e00a      	b.n	80013bc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4413      	add	r3, r2
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3da      	bcc.n	8001372 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80013bc:	f000 f878 	bl	80014b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_FLASHEx_Erase+0xd8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]

  return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000574 	.word	0x20000574
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <FLASH_MassErase+0x44>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <FLASH_MassErase+0x44>)
 80013ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <FLASH_MassErase+0x44>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4a09      	ldr	r2, [pc, #36]	; (800141c <FLASH_MassErase+0x44>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <FLASH_MassErase+0x44>)
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	4313      	orrs	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <FLASH_MassErase+0x44>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6113      	str	r3, [r2, #16]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e010      	b.n	800145e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d103      	bne.n	800144a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e009      	b.n	800145e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d103      	bne.n	8001458 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e002      	b.n	800145e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800145c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001468:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	490f      	ldr	r1, [pc, #60]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 800147c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001480:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4313      	orrs	r3, r2
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <FLASH_Erase_Sector+0x8c>)
 800149a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149e:	6113      	str	r3, [r2, #16]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d017      	beq.n	80014f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a16      	ldr	r2, [pc, #88]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d017      	beq.n	800152c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <FLASH_FlushCaches+0x88>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <FLASH_FlushCaches+0x88>)
 8001502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001506:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <FLASH_FlushCaches+0x88>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <FLASH_FlushCaches+0x88>)
 800150e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <FLASH_FlushCaches+0x88>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <FLASH_FlushCaches+0x88>)
 800151a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_FlushCaches+0x88>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <FLASH_FlushCaches+0x88>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
  }
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e165      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8154 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80ae 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_GPIO_Init+0x300>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_GPIO_Init+0x300>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b5a      	ldr	r3, [pc, #360]	; (800183c <HAL_GPIO_Init+0x300>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_GPIO_Init+0x304>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x308>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d025      	beq.n	8001756 <HAL_GPIO_Init+0x21a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x30c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d01f      	beq.n	8001752 <HAL_GPIO_Init+0x216>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x310>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x212>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x314>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x20e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x318>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x20a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x31c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x206>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x320>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x202>
 800173a:	2306      	movs	r3, #6
 800173c:	e00c      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800173e:	2307      	movs	r3, #7
 8001740:	e00a      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001742:	2305      	movs	r3, #5
 8001744:	e008      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001746:	2304      	movs	r3, #4
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800174a:	2303      	movs	r3, #3
 800174c:	e004      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800174e:	2302      	movs	r3, #2
 8001750:	e002      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001756:	2300      	movs	r3, #0
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f002 0203 	and.w	r2, r2, #3
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	4093      	lsls	r3, r2
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001768:	4935      	ldr	r1, [pc, #212]	; (8001840 <HAL_GPIO_Init+0x304>)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_GPIO_Init+0x324>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_GPIO_Init+0x324>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_GPIO_Init+0x324>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <HAL_GPIO_Init+0x324>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_GPIO_Init+0x324>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_GPIO_Init+0x324>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_GPIO_Init+0x324>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <HAL_GPIO_Init+0x324>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	f67f ae96 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40013800 	.word	0x40013800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40021400 	.word	0x40021400
 800185c:	40021800 	.word	0x40021800
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e001      	b.n	8001886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d8:	887a      	ldrh	r2, [r7, #2]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	041a      	lsls	r2, r3, #16
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	400b      	ands	r3, r1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d90c      	bls.n	8001938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d044      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e067      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f9a8 	bl	8000d40 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f9a4 	bl	8000d40 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d20c      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 fb7f 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f908 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	080075b8 	.word	0x080075b8
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	080075c8 	.word	0x080075c8

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	080075c8 	.word	0x080075c8

08001b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	496c      	ldr	r1, [pc, #432]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b96:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b9c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	4960      	ldr	r1, [pc, #384]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d017      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4955      	ldr	r1, [pc, #340]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001be2:	d101      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	4946      	ldr	r1, [pc, #280]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 808a 	beq.w	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c66:	f7ff f86b 	bl	8000d40 <HAL_GetTick>
 8001c6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff f867 	bl	8000d40 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e278      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c94:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02f      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d028      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d114      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f835 	bl	8000d40 <HAL_GetTick>
 8001cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff f831 	bl	8000d40 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e240      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d08:	d114      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1e:	4902      	ldr	r1, [pc, #8]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e00c      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470e40 	.word	0x42470e40
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d3e:	6093      	str	r3, [r2, #8]
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	4944      	ldr	r1, [pc, #272]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001d66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4937      	ldr	r1, [pc, #220]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	492e      	ldr	r1, [pc, #184]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d011      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	4926      	ldr	r1, [pc, #152]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	491a      	ldr	r1, [pc, #104]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d011      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e18:	4911      	ldr	r1, [pc, #68]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e28:	d101      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e3c:	f040 80ff 	bne.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e46:	f7fe ff7b 	bl	8000d40 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e4c:	e00e      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e4e:	f7fe ff77 	bl	8000d40 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d907      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e188      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e60:	40023800 	.word	0x40023800
 8001e64:	424711e0 	.word	0x424711e0
 8001e68:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ea      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d028      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d124      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	3301      	adds	r3, #1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb8:	0e1b      	lsrs	r3, r3, #24
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	019b      	lsls	r3, r3, #6
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	071b      	lsls	r3, r3, #28
 8001ee2:	4961      	ldr	r1, [pc, #388]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d035      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d130      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f2e:	0f1b      	lsrs	r3, r3, #28
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	019b      	lsls	r3, r3, #6
 8001f40:	431a      	orrs	r2, r3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	431a      	orrs	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	071b      	lsls	r3, r3, #28
 8001f58:	4943      	ldr	r1, [pc, #268]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f60:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f66:	f023 021f 	bic.w	r2, r3, #31
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	493d      	ldr	r1, [pc, #244]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d029      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8c:	d124      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa6:	0f1b      	lsrs	r3, r3, #28
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	019b      	lsls	r3, r3, #6
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	071b      	lsls	r3, r3, #28
 8001fd0:	4925      	ldr	r1, [pc, #148]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d016      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	071b      	lsls	r3, r3, #28
 800200a:	4917      	ldr	r1, [pc, #92]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fe92 	bl	8000d40 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002020:	f7fe fe8e 	bl	8000d40 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e09f      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 8095 	bne.w	8002170 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fe78 	bl	8000d40 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002054:	f7fe fe74 	bl	8000d40 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e085      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	42470068 	.word	0x42470068
 8002070:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002074:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800207c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002080:	d0e8      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d02b      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d127      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	4928      	ldr	r1, [pc, #160]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	3b01      	subs	r3, #1
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	4922      	ldr	r1, [pc, #136]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01d      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210e:	d118      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	0e1b      	lsrs	r3, r3, #24
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	019b      	lsls	r3, r3, #6
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fdfa 	bl	8000d40 <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002150:	f7fe fdf6 	bl	8000d40 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e007      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800216a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800216e:	d1ef      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3730      	adds	r7, #48	; 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	42470070 	.word	0x42470070

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b0ae      	sub	sp, #184	; 0xb8
 800218a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021aa:	4bcb      	ldr	r3, [pc, #812]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	f200 8206 	bhi.w	80025c4 <HAL_RCC_GetSysClockFreq+0x440>
 80021b8:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	080021f5 	.word	0x080021f5
 80021c4:	080025c5 	.word	0x080025c5
 80021c8:	080025c5 	.word	0x080025c5
 80021cc:	080025c5 	.word	0x080025c5
 80021d0:	080021fd 	.word	0x080021fd
 80021d4:	080025c5 	.word	0x080025c5
 80021d8:	080025c5 	.word	0x080025c5
 80021dc:	080025c5 	.word	0x080025c5
 80021e0:	08002205 	.word	0x08002205
 80021e4:	080025c5 	.word	0x080025c5
 80021e8:	080025c5 	.word	0x080025c5
 80021ec:	080025c5 	.word	0x080025c5
 80021f0:	080023f5 	.word	0x080023f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4bb9      	ldr	r3, [pc, #740]	; (80024dc <HAL_RCC_GetSysClockFreq+0x358>)
 80021f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80021fa:	e1e7      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4bb8      	ldr	r3, [pc, #736]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002202:	e1e3      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002204:	4bb4      	ldr	r3, [pc, #720]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002210:	4bb1      	ldr	r3, [pc, #708]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d071      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221c:	4bae      	ldr	r3, [pc, #696]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002228:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800222c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800223e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002242:	4622      	mov	r2, r4
 8002244:	462b      	mov	r3, r5
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0159      	lsls	r1, r3, #5
 8002250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002254:	0150      	lsls	r0, r2, #5
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4621      	mov	r1, r4
 800225c:	1a51      	subs	r1, r2, r1
 800225e:	6439      	str	r1, [r7, #64]	; 0x40
 8002260:	4629      	mov	r1, r5
 8002262:	eb63 0301 	sbc.w	r3, r3, r1
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002274:	4649      	mov	r1, r9
 8002276:	018b      	lsls	r3, r1, #6
 8002278:	4641      	mov	r1, r8
 800227a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800227e:	4641      	mov	r1, r8
 8002280:	018a      	lsls	r2, r1, #6
 8002282:	4641      	mov	r1, r8
 8002284:	1a51      	subs	r1, r2, r1
 8002286:	63b9      	str	r1, [r7, #56]	; 0x38
 8002288:	4649      	mov	r1, r9
 800228a:	eb63 0301 	sbc.w	r3, r3, r1
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800229c:	4649      	mov	r1, r9
 800229e:	00cb      	lsls	r3, r1, #3
 80022a0:	4641      	mov	r1, r8
 80022a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a6:	4641      	mov	r1, r8
 80022a8:	00ca      	lsls	r2, r1, #3
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	4622      	mov	r2, r4
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	462b      	mov	r3, r5
 80022b8:	460a      	mov	r2, r1
 80022ba:	eb42 0303 	adc.w	r3, r2, r3
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022cc:	4629      	mov	r1, r5
 80022ce:	024b      	lsls	r3, r1, #9
 80022d0:	4621      	mov	r1, r4
 80022d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d6:	4621      	mov	r1, r4
 80022d8:	024a      	lsls	r2, r1, #9
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022f0:	f7fd ff88 	bl	8000204 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022fe:	e067      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800230c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	67bb      	str	r3, [r7, #120]	; 0x78
 800231a:	2300      	movs	r3, #0
 800231c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800231e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002322:	4622      	mov	r2, r4
 8002324:	462b      	mov	r3, r5
 8002326:	f04f 0000 	mov.w	r0, #0
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	0159      	lsls	r1, r3, #5
 8002330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002334:	0150      	lsls	r0, r2, #5
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4621      	mov	r1, r4
 800233c:	1a51      	subs	r1, r2, r1
 800233e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002340:	4629      	mov	r1, r5
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002354:	4649      	mov	r1, r9
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235e:	4641      	mov	r1, r8
 8002360:	018a      	lsls	r2, r1, #6
 8002362:	4641      	mov	r1, r8
 8002364:	ebb2 0a01 	subs.w	sl, r2, r1
 8002368:	4649      	mov	r1, r9
 800236a:	eb63 0b01 	sbc.w	fp, r3, r1
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800237a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800237e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002382:	4692      	mov	sl, r2
 8002384:	469b      	mov	fp, r3
 8002386:	4623      	mov	r3, r4
 8002388:	eb1a 0303 	adds.w	r3, sl, r3
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	462b      	mov	r3, r5
 8002390:	eb4b 0303 	adc.w	r3, fp, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023a2:	4629      	mov	r1, r5
 80023a4:	028b      	lsls	r3, r1, #10
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ac:	4621      	mov	r1, r4
 80023ae:	028a      	lsls	r2, r1, #10
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b8:	2200      	movs	r2, #0
 80023ba:	673b      	str	r3, [r7, #112]	; 0x70
 80023bc:	677a      	str	r2, [r7, #116]	; 0x74
 80023be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023c2:	f7fd ff1f 	bl	8000204 <__aeabi_uldivmod>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4613      	mov	r3, r2
 80023cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80023e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023f2:	e0eb      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002400:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06b      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	2200      	movs	r2, #0
 8002414:	66bb      	str	r3, [r7, #104]	; 0x68
 8002416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241e:	663b      	str	r3, [r7, #96]	; 0x60
 8002420:	2300      	movs	r3, #0
 8002422:	667b      	str	r3, [r7, #100]	; 0x64
 8002424:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002428:	4622      	mov	r2, r4
 800242a:	462b      	mov	r3, r5
 800242c:	f04f 0000 	mov.w	r0, #0
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	0159      	lsls	r1, r3, #5
 8002436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243a:	0150      	lsls	r0, r2, #5
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4621      	mov	r1, r4
 8002442:	1a51      	subs	r1, r2, r1
 8002444:	61b9      	str	r1, [r7, #24]
 8002446:	4629      	mov	r1, r5
 8002448:	eb63 0301 	sbc.w	r3, r3, r1
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800245a:	4659      	mov	r1, fp
 800245c:	018b      	lsls	r3, r1, #6
 800245e:	4651      	mov	r1, sl
 8002460:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002464:	4651      	mov	r1, sl
 8002466:	018a      	lsls	r2, r1, #6
 8002468:	4651      	mov	r1, sl
 800246a:	ebb2 0801 	subs.w	r8, r2, r1
 800246e:	4659      	mov	r1, fp
 8002470:	eb63 0901 	sbc.w	r9, r3, r1
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002488:	4690      	mov	r8, r2
 800248a:	4699      	mov	r9, r3
 800248c:	4623      	mov	r3, r4
 800248e:	eb18 0303 	adds.w	r3, r8, r3
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	462b      	mov	r3, r5
 8002496:	eb49 0303 	adc.w	r3, r9, r3
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024a8:	4629      	mov	r1, r5
 80024aa:	024b      	lsls	r3, r1, #9
 80024ac:	4621      	mov	r1, r4
 80024ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b2:	4621      	mov	r1, r4
 80024b4:	024a      	lsls	r2, r1, #9
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024be:	2200      	movs	r2, #0
 80024c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80024c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024c8:	f7fd fe9c 	bl	8000204 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024d6:	e065      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x420>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_GetSysClockFreq+0x458>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	2200      	movs	r2, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	4611      	mov	r1, r2
 80024f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024f4:	653b      	str	r3, [r7, #80]	; 0x50
 80024f6:	2300      	movs	r3, #0
 80024f8:	657b      	str	r3, [r7, #84]	; 0x54
 80024fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80024fe:	4642      	mov	r2, r8
 8002500:	464b      	mov	r3, r9
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002510:	0150      	lsls	r0, r2, #5
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4641      	mov	r1, r8
 8002518:	1a51      	subs	r1, r2, r1
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	4649      	mov	r1, r9
 800251e:	eb63 0301 	sbc.w	r3, r3, r1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002530:	4659      	mov	r1, fp
 8002532:	018b      	lsls	r3, r1, #6
 8002534:	4651      	mov	r1, sl
 8002536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800253a:	4651      	mov	r1, sl
 800253c:	018a      	lsls	r2, r1, #6
 800253e:	4651      	mov	r1, sl
 8002540:	1a54      	subs	r4, r2, r1
 8002542:	4659      	mov	r1, fp
 8002544:	eb63 0501 	sbc.w	r5, r3, r1
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	4643      	mov	r3, r8
 800255e:	18e3      	adds	r3, r4, r3
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	464b      	mov	r3, r9
 8002564:	eb45 0303 	adc.w	r3, r5, r3
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002576:	4629      	mov	r1, r5
 8002578:	028b      	lsls	r3, r1, #10
 800257a:	4621      	mov	r1, r4
 800257c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002580:	4621      	mov	r1, r4
 8002582:	028a      	lsls	r2, r1, #10
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258c:	2200      	movs	r2, #0
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002590:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002592:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002596:	f7fd fe35 	bl	8000204 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4613      	mov	r3, r2
 80025a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_RCC_GetSysClockFreq+0x458>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0f1b      	lsrs	r3, r3, #28
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80025b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025c2:	e003      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	37b8      	adds	r7, #184	; 0xb8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400

080025e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e28d      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8083 	beq.w	800270a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002604:	4b94      	ldr	r3, [pc, #592]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b04      	cmp	r3, #4
 800260e:	d019      	beq.n	8002644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002610:	4b91      	ldr	r3, [pc, #580]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002618:	2b08      	cmp	r3, #8
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800261c:	4b8e      	ldr	r3, [pc, #568]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d112      	bne.n	800265c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b84      	ldr	r3, [pc, #528]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d05b      	beq.n	8002708 <HAL_RCC_OscConfig+0x124>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d157      	bne.n	8002708 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e25a      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x90>
 8002666:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7b      	ldr	r2, [pc, #492]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xcc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xb4>
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a72      	ldr	r2, [pc, #456]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xcc>
 8002698:	4b6f      	ldr	r3, [pc, #444]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6e      	ldr	r2, [pc, #440]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fb42 	bl	8000d40 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fb3e 	bl	8000d40 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e21f      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b61      	ldr	r3, [pc, #388]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xdc>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fb2e 	bl	8000d40 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fb2a 	bl	8000d40 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e20b      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x104>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d06f      	beq.n	80027f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002716:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d017      	beq.n	8002752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002722:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800272a:	2b08      	cmp	r3, #8
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x186>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1d3      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x278>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fad7 	bl	8000d40 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fad3 	bl	8000d40 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1b4      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x278>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fab6 	bl	8000d40 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fab2 	bl	8000d40 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e193      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x27c>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fa96 	bl	8000d40 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fa92 	bl	8000d40 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e173      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x234>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x27c>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7fe fa7f 	bl	8000d40 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe fa7b 	bl	8000d40 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e15c      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7f      	ldr	r3, [pc, #508]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a7e      	ldr	r2, [pc, #504]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b7c      	ldr	r3, [pc, #496]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <HAL_RCC_OscConfig+0x4b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b76      	ldr	r3, [pc, #472]	; (8002a94 <HAL_RCC_OscConfig+0x4b0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a75      	ldr	r2, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x4b0>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fa3b 	bl	8000d40 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fa37 	bl	8000d40 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e118      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6c      	ldr	r3, [pc, #432]	; (8002a94 <HAL_RCC_OscConfig+0x4b0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x31e>
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x358>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x340>
 800290a:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x358>
 8002924:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a59      	ldr	r2, [pc, #356]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a56      	ldr	r2, [pc, #344]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe f9fc 	bl	8000d40 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe f9f8 	bl	8000d40 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0d7      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x368>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe f9e6 	bl	8000d40 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe f9e2 	bl	8000d40 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0c1      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80ad 	beq.w	8002b10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d060      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d145      	bne.n	8002a56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_RCC_OscConfig+0x4b4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe f9b6 	bl	8000d40 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe f9b2 	bl	8000d40 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e093      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	071b      	lsls	r3, r3, #28
 8002a22:	491b      	ldr	r1, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4b4>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f987 	bl	8000d40 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe f983 	bl	8000d40 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e064      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x452>
 8002a54:	e05c      	b.n	8002b10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x4b4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe f970 	bl	8000d40 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe f96c 	bl	8000d40 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e04d      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x480>
 8002a82:	e045      	b.n	8002b10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e040      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_OscConfig+0x538>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d030      	beq.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d129      	bne.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d122      	bne.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d119      	bne.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10f      	bne.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fd ff0d 	bl	8000964 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f814 	bl	8002b80 <HAL_SD_InitCard>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00a      	b.n	8002b78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b80:	b5b0      	push	{r4, r5, r7, lr}
 8002b82:	b08e      	sub	sp, #56	; 0x38
 8002b84:	af04      	add	r7, sp, #16
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002b9c:	2376      	movs	r3, #118	; 0x76
 8002b9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681d      	ldr	r5, [r3, #0]
 8002ba4:	466c      	mov	r4, sp
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f001 fbfd 	bl	80043b8 <SDIO_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e04f      	b.n	8002c70 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_SD_InitCard+0xf8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fc35 	bl	800444a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_SD_InitCard+0xf8>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7fe f8b6 	bl	8000d58 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 ff03 	bl	80039f8 <SD_PowerON>
 8002bf2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e02e      	b.n	8002c70 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fe22 	bl	800385c <SD_InitCard>
 8002c18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e01b      	b.n	8002c70 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fc94 	bl	800456e <SDMMC_CmdBlockLength>
 8002c46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00f      	beq.n	8002c6e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_SD_InitCard+0xfc>)
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdb0      	pop	{r4, r5, r7, pc}
 8002c78:	422580a0 	.word	0x422580a0
 8002c7c:	004005ff 	.word	0x004005ff

08002c80 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b092      	sub	sp, #72	; 0x48
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c8e:	f7fe f857 	bl	8000d40 <HAL_GetTick>
 8002c92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1bd      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 81b0 	bne.w	8003020 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d907      	bls.n	8002ce4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e1a4      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d0e:	2390      	movs	r3, #144	; 0x90
 8002d10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d12:	2302      	movs	r3, #2
 8002d14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f107 0214 	add.w	r2, r7, #20
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fbf4 	bl	8004516 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d90a      	bls.n	8002d4a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 fc58 	bl	80045f6 <SDMMC_CmdReadMultiBlock>
 8002d46:	6478      	str	r0, [r7, #68]	; 0x44
 8002d48:	e009      	b.n	8002d5e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fc2b 	bl	80045b2 <SDMMC_CmdReadSingleBlock>
 8002d5c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e151      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002d8e:	e061      	b.n	8002e54 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d03c      	beq.n	8002e18 <HAL_SD_ReadBlocks+0x198>
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d039      	beq.n	8002e18 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
 8002da8:	e033      	b.n	8002e12 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fb2d 	bl	800440e <SDIO_ReadFIFO>
 8002db4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	3301      	adds	r3, #1
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	3b01      	subs	r3, #1
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	0e1b      	lsrs	r3, r3, #24
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	3301      	adds	r3, #1
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0e:	3301      	adds	r3, #1
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e14:	2b07      	cmp	r3, #7
 8002e16:	d9c8      	bls.n	8002daa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e18:	f7fd ff92 	bl	8000d40 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d902      	bls.n	8002e2e <HAL_SD_ReadBlocks+0x1ae>
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d112      	bne.n	8002e54 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0ec      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d096      	beq.n	8002d90 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_SD_ReadBlocks+0x236>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d91f      	bls.n	8002eb6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fc1e 	bl	80046c4 <SDMMC_CmdStopTransfer>
 8002e88:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0bb      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	f043 0208 	orr.w	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0a1      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f043 0202 	orr.w	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e087      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d064      	beq.n	8002ff6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <HAL_SD_ReadBlocks+0x2d4>)
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06d      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
 8002f52:	bf00      	nop
 8002f54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fa56 	bl	800440e <SDIO_ReadFIFO>
 8002f62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	3301      	adds	r3, #1
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f74:	3b01      	subs	r3, #1
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	3301      	adds	r3, #1
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	0e1b      	lsrs	r3, r3, #24
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fba:	f7fd fec1 	bl	8000d40 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d902      	bls.n	8002fd0 <HAL_SD_ReadBlocks+0x350>
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d112      	bne.n	8002ff6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_SD_ReadBlocks+0x3b8>)
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e01b      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_SD_ReadBlocks+0x38a>
 8003004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1a6      	bne.n	8002f58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003012:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e006      	b.n	800302e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3748      	adds	r7, #72	; 0x48
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	004005ff 	.word	0x004005ff

0800303c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b092      	sub	sp, #72	; 0x48
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7fd fe79 	bl	8000d40 <HAL_GetTick>
 800304e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e165      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 8158 	bne.w	800332c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	441a      	add	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	429a      	cmp	r2, r3
 800308e:	d907      	bls.n	80030a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e14c      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2203      	movs	r2, #3
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	025b      	lsls	r3, r3, #9
 80030c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80030ca:	2390      	movs	r3, #144	; 0x90
 80030cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f107 0218 	add.w	r2, r7, #24
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fa16 	bl	8004516 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d90a      	bls.n	8003106 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fabe 	bl	800467e <SDMMC_CmdWriteMultiBlock>
 8003102:	6478      	str	r0, [r7, #68]	; 0x44
 8003104:	e009      	b.n	800311a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2210      	movs	r2, #16
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003112:	4618      	mov	r0, r3
 8003114:	f001 fa91 	bl	800463a <SDMMC_CmdWriteSingleBlock>
 8003118:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800311a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a87      	ldr	r2, [pc, #540]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	431a      	orrs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0f9      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800314a:	e065      	b.n	8003218 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d040      	beq.n	80031dc <HAL_SD_WriteBlocks+0x1a0>
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03d      	beq.n	80031dc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003160:	2300      	movs	r3, #0
 8003162:	643b      	str	r3, [r7, #64]	; 0x40
 8003164:	e037      	b.n	80031d6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	3301      	adds	r3, #1
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	3b01      	subs	r3, #1
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	021a      	lsls	r2, r3, #8
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	3301      	adds	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	3b01      	subs	r3, #1
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	3301      	adds	r3, #1
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	061a      	lsls	r2, r3, #24
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	3301      	adds	r3, #1
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031bc:	3b01      	subs	r3, #1
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f107 0214 	add.w	r2, r7, #20
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f92c 	bl	8004428 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	3301      	adds	r3, #1
 80031d4:	643b      	str	r3, [r7, #64]	; 0x40
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	2b07      	cmp	r3, #7
 80031da:	d9c4      	bls.n	8003166 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031dc:	f7fd fdb0 	bl	8000d40 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d902      	bls.n	80031f2 <HAL_SD_WriteBlocks+0x1b6>
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d112      	bne.n	8003218 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a53      	ldr	r2, [pc, #332]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e090      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003222:	2b00      	cmp	r3, #0
 8003224:	d092      	beq.n	800314c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d022      	beq.n	800327a <HAL_SD_WriteBlocks+0x23e>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d91f      	bls.n	800327a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	2b03      	cmp	r3, #3
 8003240:	d01b      	beq.n	800327a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f001 fa3c 	bl	80046c4 <SDMMC_CmdStopTransfer>
 800324c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e05f      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	f043 0208 	orr.w	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e045      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	f043 0202 	orr.w	r2, r3, #2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e02b      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a13      	ldr	r2, [pc, #76]	; (8003344 <HAL_SD_WriteBlocks+0x308>)
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e011      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f240 523a 	movw	r2, #1338	; 0x53a
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e006      	b.n	800333a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3748      	adds	r7, #72	; 0x48
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	004005ff 	.word	0x004005ff

08003348 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003356:	0f9b      	lsrs	r3, r3, #30
 8003358:	b2da      	uxtb	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003362:	0e9b      	lsrs	r3, r3, #26
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003374:	0e1b      	lsrs	r3, r3, #24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2da      	uxtb	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b2da      	uxtb	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	0bdb      	lsrs	r3, r3, #15
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	0b9b      	lsrs	r3, r3, #14
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	0b1b      	lsrs	r3, r3, #12
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	2b00      	cmp	r3, #0
 8003416:	d163      	bne.n	80034e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003428:	0f92      	lsrs	r2, r2, #30
 800342a:	431a      	orrs	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003434:	0edb      	lsrs	r3, r3, #27
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	b2da      	uxtb	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003446:	0e1b      	lsrs	r3, r3, #24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	b2da      	uxtb	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003458:	0d5b      	lsrs	r3, r3, #21
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	b2da      	uxtb	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346a:	0c9b      	lsrs	r3, r3, #18
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	b2da      	uxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347c:	0bdb      	lsrs	r3, r3, #15
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	b2da      	uxtb	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	3302      	adds	r3, #2
 80034a0:	2201      	movs	r2, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034aa:	fb03 f202 	mul.w	r2, r3, r2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	7a1b      	ldrb	r3, [r3, #8]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034cc:	0a52      	lsrs	r2, r2, #9
 80034ce:	fb03 f202 	mul.w	r2, r3, r2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
 80034de:	e031      	b.n	8003544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d11d      	bne.n	8003524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	3301      	adds	r3, #1
 8003504:	029a      	lsls	r2, r3, #10
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
 8003522:	e00f      	b.n	8003544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_SD_GetCardCSD+0x344>)
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e09d      	b.n	8003680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	0b9b      	lsrs	r3, r3, #14
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	09db      	lsrs	r3, r3, #7
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003562:	b2da      	uxtb	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	0fdb      	lsrs	r3, r3, #31
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	0f5b      	lsrs	r3, r3, #29
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	0d9b      	lsrs	r3, r3, #22
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	0d5b      	lsrs	r3, r3, #21
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	0bdb      	lsrs	r3, r3, #15
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	0b9b      	lsrs	r3, r3, #14
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	0b5b      	lsrs	r3, r3, #13
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	0b1b      	lsrs	r3, r3, #12
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	b2da      	uxtb	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	004005ff 	.word	0x004005ff

08003690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	2b03      	cmp	r3, #3
 8003706:	d02e      	beq.n	8003766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d106      	bne.n	800371e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
 800371c:	e029      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003724:	d10a      	bne.n	800373c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa1c 	bl	8003b64 <SD_WideBus_Enable>
 800372c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38
 800373a:	e01a      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa59 	bl	8003bfa <SD_WideBus_Disable>
 8003748:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
 8003756:	e00c      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	e005      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003790:	e01f      	b.n	80037d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681d      	ldr	r5, [r3, #0]
 80037b8:	466c      	mov	r4, sp
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 fdf3 	bl	80043b8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fec7 	bl	800456e <SDMMC_CmdBlockLength>
 80037e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_SD_ConfigWideBusOperation+0x130>)
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800380a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	004005ff 	.word	0x004005ff

0800381c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f970 	bl	8003b14 <SD_SendStatus>
 8003834:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003852:	693b      	ldr	r3, [r7, #16]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800385c:	b5b0      	push	{r4, r5, r7, lr}
 800385e:	b094      	sub	sp, #80	; 0x50
 8003860:	af04      	add	r7, sp, #16
 8003862:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fdfa 	bl	8004466 <SDIO_GetPowerState>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800387c:	e0b8      	b.n	80039f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	2b03      	cmp	r3, #3
 8003884:	d02f      	beq.n	80038e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f824 	bl	80048d8 <SDMMC_CmdSendCID>
 8003890:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SD_InitCard+0x40>
    {
      return errorstate;
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	e0a9      	b.n	80039f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fe24 	bl	80044f0 <SDIO_GetResponse>
 80038a8:	4602      	mov	r2, r0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2104      	movs	r1, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fe1b 	bl	80044f0 <SDIO_GetResponse>
 80038ba:	4602      	mov	r2, r0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2108      	movs	r1, #8
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fe12 	bl	80044f0 <SDIO_GetResponse>
 80038cc:	4602      	mov	r2, r0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	210c      	movs	r1, #12
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fe09 	bl	80044f0 <SDIO_GetResponse>
 80038de:	4602      	mov	r2, r0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d00d      	beq.n	800390a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f107 020e 	add.w	r2, r7, #14
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f82a 	bl	8004952 <SDMMC_CmdSetRelAdd>
 80038fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SD_InitCard+0xae>
    {
      return errorstate;
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	e072      	b.n	80039f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	2b03      	cmp	r3, #3
 8003910:	d036      	beq.n	8003980 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fff4 	bl	8004914 <SDMMC_CmdSendCSD>
 800392c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	e05b      	b.n	80039f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fdd6 	bl	80044f0 <SDIO_GetResponse>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2104      	movs	r1, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fdcd 	bl	80044f0 <SDIO_GetResponse>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2108      	movs	r1, #8
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fdc4 	bl	80044f0 <SDIO_GetResponse>
 8003968:	4602      	mov	r2, r0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	210c      	movs	r1, #12
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fdbb 	bl	80044f0 <SDIO_GetResponse>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2104      	movs	r1, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fdb2 	bl	80044f0 <SDIO_GetResponse>
 800398c:	4603      	mov	r3, r0
 800398e:	0d1a      	lsrs	r2, r3, #20
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003994:	f107 0310 	add.w	r3, r7, #16
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fcd4 	bl	8003348 <HAL_SD_GetCardCSD>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039aa:	e021      	b.n	80039f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	2200      	movs	r2, #0
 80039b8:	461c      	mov	r4, r3
 80039ba:	4615      	mov	r5, r2
 80039bc:	4622      	mov	r2, r4
 80039be:	462b      	mov	r3, r5
 80039c0:	4608      	mov	r0, r1
 80039c2:	f000 fea1 	bl	8004708 <SDMMC_CmdSelDesel>
 80039c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	e00e      	b.n	80039f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681d      	ldr	r5, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	466c      	mov	r4, sp
 80039da:	f103 0210 	add.w	r2, r3, #16
 80039de:	ca07      	ldmia	r2, {r0, r1, r2}
 80039e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039e4:	3304      	adds	r3, #4
 80039e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 fce5 	bl	80043b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3740      	adds	r7, #64	; 0x40
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}

080039f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fe9c 	bl	800474e <SDMMC_CmdGoIdleState>
 8003a16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e072      	b.n	8003b08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 feaf 	bl	800478a <SDMMC_CmdOperCond>
 8003a2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fe85 	bl	800474e <SDMMC_CmdGoIdleState>
 8003a44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	e05b      	b.n	8003b08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d137      	bne.n	8003ace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 feaf 	bl	80047c8 <SDMMC_CmdAppCommand>
 8003a6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02d      	beq.n	8003ace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a76:	e047      	b.n	8003b08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fea2 	bl	80047c8 <SDMMC_CmdAppCommand>
 8003a84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <SD_PowerON+0x98>
    {
      return errorstate;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	e03b      	b.n	8003b08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	491e      	ldr	r1, [pc, #120]	; (8003b10 <SD_PowerON+0x118>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 feb8 	bl	800480c <SDMMC_CmdAppOperCommand>
 8003a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003aa8:	e02e      	b.n	8003b08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd1d 	bl	80044f0 <SDIO_GetResponse>
 8003ab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	0fdb      	lsrs	r3, r3, #31
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <SD_PowerON+0xcc>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <SD_PowerON+0xce>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]

    count++;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d802      	bhi.n	8003ade <SD_PowerON+0xe6>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0cc      	beq.n	8003a78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d902      	bls.n	8003aee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aec:	e00c      	b.n	8003b08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
 8003afe:	e002      	b.n	8003b06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	c1100000 	.word	0xc1100000

08003b14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003b24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b28:	e018      	b.n	8003b5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 ff2c 	bl	8004994 <SDMMC_CmdSendStatus>
 8003b3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	e009      	b.n	8003b5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fcce 	bl	80044f0 <SDIO_GetResponse>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fcb8 	bl	80044f0 <SDIO_GetResponse>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b8a:	d102      	bne.n	8003b92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b90:	e02f      	b.n	8003bf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f879 	bl	8003c90 <SD_FindSCR>
 8003b9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	e023      	b.n	8003bf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01c      	beq.n	8003bee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 fe01 	bl	80047c8 <SDMMC_CmdAppCommand>
 8003bc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	e00f      	b.n	8003bf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fe3a 	bl	8004852 <SDMMC_CmdBusWidth>
 8003bde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	e003      	b.n	8003bf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e001      	b.n	8003bf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fc6d 	bl	80044f0 <SDIO_GetResponse>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c20:	d102      	bne.n	8003c28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c26:	e02f      	b.n	8003c88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f82e 	bl	8003c90 <SD_FindSCR>
 8003c34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	e023      	b.n	8003c88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01c      	beq.n	8003c84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fdb6 	bl	80047c8 <SDMMC_CmdAppCommand>
 8003c5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e00f      	b.n	8003c88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fdef 	bl	8004852 <SDMMC_CmdBusWidth>
 8003c74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	e003      	b.n	8003c88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e001      	b.n	8003c88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b08f      	sub	sp, #60	; 0x3c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c9a:	f7fd f851 	bl	8000d40 <HAL_GetTick>
 8003c9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fc59 	bl	800456e <SDMMC_CmdBlockLength>
 8003cbc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	e0b2      	b.n	8003e2e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 fd77 	bl	80047c8 <SDMMC_CmdAppCommand>
 8003cda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	e0a3      	b.n	8003e2e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003cec:	2308      	movs	r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003cf0:	2330      	movs	r3, #48	; 0x30
 8003cf2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f107 0210 	add.w	r2, r7, #16
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fc03 	bl	8004516 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fdbe 	bl	8004896 <SDMMC_CmdSendSCR>
 8003d1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d02a      	beq.n	8003d78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	e083      	b.n	8003e2e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	f107 0208 	add.w	r2, r7, #8
 8003d40:	18d4      	adds	r4, r2, r3
 8003d42:	4608      	mov	r0, r1
 8003d44:	f000 fb63 	bl	800440e <SDIO_ReadFIFO>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	6023      	str	r3, [r4, #0]
      index++;
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	3301      	adds	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
 8003d52:	e006      	b.n	8003d62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003d62:	f7fc ffed 	bl	8000d40 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d102      	bne.n	8003d78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003d72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d76:	e05a      	b.n	8003e2e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0cf      	beq.n	8003d26 <SD_FindSCR+0x96>
 8003d86:	e000      	b.n	8003d8a <SD_FindSCR+0xfa>
      break;
 8003d88:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003da0:	2308      	movs	r3, #8
 8003da2:	e044      	b.n	8003e2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2202      	movs	r2, #2
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e037      	b.n	8003e2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e02a      	b.n	8003e2e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	061a      	lsls	r2, r3, #24
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	601a      	str	r2, [r3, #0]
    scr++;
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	3304      	adds	r3, #4
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	061a      	lsls	r2, r3, #24
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	0e1b      	lsrs	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	373c      	adds	r7, #60	; 0x3c
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd90      	pop	{r4, r7, pc}

08003e36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e03f      	b.n	8003ec8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fc fe27 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f828 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b0c0      	sub	sp, #256	; 0x100
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	ea40 0301 	orr.w	r3, r0, r1
 8003ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f28:	f021 010c 	bic.w	r1, r1, #12
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f36:	430b      	orrs	r3, r1
 8003f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	6999      	ldr	r1, [r3, #24]
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	ea40 0301 	orr.w	r3, r0, r1
 8003f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8f      	ldr	r3, [pc, #572]	; (800419c <UART_SetConfig+0x2cc>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d005      	beq.n	8003f70 <UART_SetConfig+0xa0>
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b8d      	ldr	r3, [pc, #564]	; (80041a0 <UART_SetConfig+0x2d0>)
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d104      	bne.n	8003f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fd fdca 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8003f74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f78:	e003      	b.n	8003f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f7a:	f7fd fdb1 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8003f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	f040 810c 	bne.w	80041a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003faa:	415b      	adcs	r3, r3
 8003fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	eb12 0801 	adds.w	r8, r2, r1
 8003fb8:	4629      	mov	r1, r5
 8003fba:	eb43 0901 	adc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	eb49 0303 	adc.w	r3, r9, r3
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ffe:	460b      	mov	r3, r1
 8004000:	18db      	adds	r3, r3, r3
 8004002:	653b      	str	r3, [r7, #80]	; 0x50
 8004004:	4613      	mov	r3, r2
 8004006:	eb42 0303 	adc.w	r3, r2, r3
 800400a:	657b      	str	r3, [r7, #84]	; 0x54
 800400c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004014:	f7fc f8f6 	bl	8000204 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <UART_SetConfig+0x2d4>)
 800401e:	fba3 2302 	umull	r2, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	011c      	lsls	r4, r3, #4
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004030:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004040:	415b      	adcs	r3, r3
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004048:	4641      	mov	r1, r8
 800404a:	eb12 0a01 	adds.w	sl, r2, r1
 800404e:	4649      	mov	r1, r9
 8004050:	eb43 0b01 	adc.w	fp, r3, r1
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004068:	4692      	mov	sl, r2
 800406a:	469b      	mov	fp, r3
 800406c:	4643      	mov	r3, r8
 800406e:	eb1a 0303 	adds.w	r3, sl, r3
 8004072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004076:	464b      	mov	r3, r9
 8004078:	eb4b 0303 	adc.w	r3, fp, r3
 800407c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800408c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	647b      	str	r3, [r7, #68]	; 0x44
 80040a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040aa:	f7fc f8ab 	bl	8000204 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <UART_SetConfig+0x2d4>)
 80040b6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2264      	movs	r2, #100	; 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	1acb      	subs	r3, r1, r3
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <UART_SetConfig+0x2d4>)
 80040cc:	fba3 2302 	umull	r2, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040d8:	441c      	add	r4, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f4:	415b      	adcs	r3, r3
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6339      	str	r1, [r7, #48]	; 0x30
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004148:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800414c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004150:	460b      	mov	r3, r1
 8004152:	18db      	adds	r3, r3, r3
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	4613      	mov	r3, r2
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004166:	f7fc f84d 	bl	8000204 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <UART_SetConfig+0x2d4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <UART_SetConfig+0x2d4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4422      	add	r2, r4
 8004196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004198:	e105      	b.n	80043a6 <UART_SetConfig+0x4d6>
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40011400 	.word	0x40011400
 80041a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ba:	4642      	mov	r2, r8
 80041bc:	464b      	mov	r3, r9
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	6239      	str	r1, [r7, #32]
 80041c2:	415b      	adcs	r3, r3
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ca:	4641      	mov	r1, r8
 80041cc:	1854      	adds	r4, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb43 0501 	adc.w	r5, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f0:	464b      	mov	r3, r9
 80041f2:	eb45 0303 	adc.w	r3, r5, r3
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004216:	4629      	mov	r1, r5
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004220:	4621      	mov	r1, r4
 8004222:	008a      	lsls	r2, r1, #2
 8004224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004228:	f7fb ffec 	bl	8000204 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b60      	ldr	r3, [pc, #384]	; (80043b4 <UART_SetConfig+0x4e4>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011c      	lsls	r4, r3, #4
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004244:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	61b9      	str	r1, [r7, #24]
 8004254:	415b      	adcs	r3, r3
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6139      	str	r1, [r7, #16]
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004290:	464b      	mov	r3, r9
 8004292:	460a      	mov	r2, r1
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042c6:	f7fb ff9d 	bl	8000204 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <UART_SetConfig+0x4e4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	; 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a34      	ldr	r2, [pc, #208]	; (80043b4 <UART_SetConfig+0x4e4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ee:	441c      	add	r4, r3
 80042f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f4:	2200      	movs	r2, #0
 80042f6:	673b      	str	r3, [r7, #112]	; 0x70
 80042f8:	677a      	str	r2, [r7, #116]	; 0x74
 80042fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	1891      	adds	r1, r2, r2
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	415b      	adcs	r3, r3
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800430e:	4641      	mov	r1, r8
 8004310:	1851      	adds	r1, r2, r1
 8004312:	6039      	str	r1, [r7, #0]
 8004314:	4649      	mov	r1, r9
 8004316:	414b      	adcs	r3, r1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004326:	4659      	mov	r1, fp
 8004328:	00cb      	lsls	r3, r1, #3
 800432a:	4651      	mov	r1, sl
 800432c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004330:	4651      	mov	r1, sl
 8004332:	00ca      	lsls	r2, r1, #3
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	4603      	mov	r3, r0
 800433a:	4642      	mov	r2, r8
 800433c:	189b      	adds	r3, r3, r2
 800433e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004340:	464b      	mov	r3, r9
 8004342:	460a      	mov	r2, r1
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	663b      	str	r3, [r7, #96]	; 0x60
 8004354:	667a      	str	r2, [r7, #100]	; 0x64
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004362:	4649      	mov	r1, r9
 8004364:	008b      	lsls	r3, r1, #2
 8004366:	4641      	mov	r1, r8
 8004368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436c:	4641      	mov	r1, r8
 800436e:	008a      	lsls	r2, r1, #2
 8004370:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004374:	f7fb ff46 	bl	8000204 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <UART_SetConfig+0x4e4>)
 800437e:	fba3 1302 	umull	r1, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <UART_SetConfig+0x4e4>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4422      	add	r2, r4
 80043a4:	609a      	str	r2, [r3, #8]
}
 80043a6:	bf00      	nop
 80043a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	51eb851f 	.word	0x51eb851f

080043b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80043b8:	b084      	sub	sp, #16
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	f107 001c 	add.w	r0, r7, #28
 80043c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80043ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80043d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80043d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80043d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80043da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80043de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80043e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80043f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr

0800440e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0303 	and.w	r3, r3, #3
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044a0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80044a6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80044ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80044bc:	f023 030f 	bic.w	r3, r3, #15
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	b2db      	uxtb	r3, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3314      	adds	r3, #20
 80044fe:	461a      	mov	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
}  
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800453c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004542:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004548:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004560:	2300      	movs	r3, #0

}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b088      	sub	sp, #32
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800457c:	2310      	movs	r3, #16
 800457e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800458c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff74 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	2110      	movs	r1, #16
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa19 	bl	80049d8 <SDMMC_GetCmdResp1>
 80045a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045a8:	69fb      	ldr	r3, [r7, #28]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b088      	sub	sp, #32
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80045c0:	2311      	movs	r3, #17
 80045c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045d2:	f107 0308 	add.w	r3, r7, #8
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff52 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	2111      	movs	r1, #17
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f9f7 	bl	80049d8 <SDMMC_GetCmdResp1>
 80045ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ec:	69fb      	ldr	r3, [r7, #28]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b088      	sub	sp, #32
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004604:	2312      	movs	r3, #18
 8004606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff30 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	2112      	movs	r1, #18
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9d5 	bl	80049d8 <SDMMC_GetCmdResp1>
 800462e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004630:	69fb      	ldr	r3, [r7, #28]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b088      	sub	sp, #32
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004648:	2318      	movs	r3, #24
 800464a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800464c:	2340      	movs	r3, #64	; 0x40
 800464e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004658:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff0e 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	2118      	movs	r1, #24
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9b3 	bl	80049d8 <SDMMC_GetCmdResp1>
 8004672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004674:	69fb      	ldr	r3, [r7, #28]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800468c:	2319      	movs	r3, #25
 800468e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004690:	2340      	movs	r3, #64	; 0x40
 8004692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff feec 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	2119      	movs	r1, #25
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f991 	bl	80049d8 <SDMMC_GetCmdResp1>
 80046b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046b8:	69fb      	ldr	r3, [r7, #28]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80046d0:	230c      	movs	r3, #12
 80046d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff feca 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <SDMMC_CmdStopTransfer+0x40>)
 80046f0:	210c      	movs	r1, #12
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f970 	bl	80049d8 <SDMMC_GetCmdResp1>
 80046f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046fa:	69fb      	ldr	r3, [r7, #28]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	05f5e100 	.word	0x05f5e100

08004708 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004718:	2307      	movs	r3, #7
 800471a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004728:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	4619      	mov	r1, r3
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fea6 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	2107      	movs	r1, #7
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f94b 	bl	80049d8 <SDMMC_GetCmdResp1>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b088      	sub	sp, #32
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800476a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fe85 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb65 	bl	8004e48 <SDMMC_GetCmdError>
 800477e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004780:	69fb      	ldr	r3, [r7, #28]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004792:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004798:	2308      	movs	r3, #8
 800479a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fe66 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 faf8 	bl	8004dac <SDMMC_GetCmdResp7>
 80047bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047be:	69fb      	ldr	r3, [r7, #28]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80047d6:	2337      	movs	r3, #55	; 0x37
 80047d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fe47 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	2137      	movs	r1, #55	; 0x37
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8ec 	bl	80049d8 <SDMMC_GetCmdResp1>
 8004800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004802:	69fb      	ldr	r3, [r7, #28]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004822:	2329      	movs	r3, #41	; 0x29
 8004824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800482e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fe21 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f9ff 	bl	8004c44 <SDMMC_GetCmdResp3>
 8004846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004860:	2306      	movs	r3, #6
 8004862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fe02 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	2106      	movs	r1, #6
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8a7 	bl	80049d8 <SDMMC_GetCmdResp1>
 800488a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488c:	69fb      	ldr	r3, [r7, #28]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80048a2:	2333      	movs	r3, #51	; 0x33
 80048a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fde1 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	2133      	movs	r1, #51	; 0x33
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f886 	bl	80049d8 <SDMMC_GetCmdResp1>
 80048cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ce:	69fb      	ldr	r3, [r7, #28]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048e4:	2302      	movs	r3, #2
 80048e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048e8:	23c0      	movs	r3, #192	; 0xc0
 80048ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fdc0 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f956 	bl	8004bb4 <SDMMC_GetCmdResp2>
 8004908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800490a:	69fb      	ldr	r3, [r7, #28]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004922:	2309      	movs	r3, #9
 8004924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004926:	23c0      	movs	r3, #192	; 0xc0
 8004928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800492e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004932:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fda1 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f937 	bl	8004bb4 <SDMMC_GetCmdResp2>
 8004946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004948:	69fb      	ldr	r3, [r7, #28]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b088      	sub	sp, #32
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004960:	2303      	movs	r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800496c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004970:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004972:	f107 0308 	add.w	r3, r7, #8
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fd82 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	2103      	movs	r1, #3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f99c 	bl	8004cc0 <SDMMC_GetCmdResp6>
 8004988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800498a:	69fb      	ldr	r3, [r7, #28]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80049a2:	230d      	movs	r3, #13
 80049a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fd61 	bl	8004482 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	210d      	movs	r1, #13
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f806 	bl	80049d8 <SDMMC_GetCmdResp1>
 80049cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ce:	69fb      	ldr	r3, [r7, #28]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	460b      	mov	r3, r1
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80049e6:	4b70      	ldr	r3, [pc, #448]	; (8004ba8 <SDMMC_GetCmdResp1+0x1d0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <SDMMC_GetCmdResp1+0x1d4>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	0a5a      	lsrs	r2, r3, #9
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	1e5a      	subs	r2, r3, #1
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a08:	e0c9      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ef      	beq.n	80049fa <SDMMC_GetCmdResp1+0x22>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ea      	bne.n	80049fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2204      	movs	r2, #4
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a36:	2304      	movs	r3, #4
 8004a38:	e0b1      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a6      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	22c5      	movs	r2, #197	; 0xc5
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fd3d 	bl	80044d6 <SDIO_GetCommandResponse>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d001      	beq.n	8004a6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e099      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fd3f 	bl	80044f0 <SDIO_GetResponse>
 8004a72:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4b4e      	ldr	r3, [pc, #312]	; (8004bb0 <SDMMC_GetCmdResp1+0x1d8>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e08d      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da02      	bge.n	8004a8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8c:	e087      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	e080      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	e079      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab8:	e071      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac8:	e069      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad8:	e061      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae8:	e059      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af8:	e051      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b08:	e049      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b18:	e041      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b28:	e039      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b38:	e031      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004b44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b48:	e029      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004b54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b58:	e021      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b68:	e019      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004b74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b78:	e011      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b88:	e009      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004b94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004b98:	e001      	b.n	8004b9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	10624dd3 	.word	0x10624dd3
 8004bb0:	fdffe008 	.word	0xfdffe008

08004bb4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <SDMMC_GetCmdResp2+0x88>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <SDMMC_GetCmdResp2+0x8c>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0a5b      	lsrs	r3, r3, #9
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	60fa      	str	r2, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004be0:	e026      	b.n	8004c30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ef      	beq.n	8004bd2 <SDMMC_GetCmdResp2+0x1e>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ea      	bne.n	8004bd2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c0e:	2304      	movs	r3, #4
 8004c10:	e00e      	b.n	8004c30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e003      	b.n	8004c30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	22c5      	movs	r2, #197	; 0xc5
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	10624dd3 	.word	0x10624dd3

08004c44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <SDMMC_GetCmdResp3+0x74>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <SDMMC_GetCmdResp3+0x78>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0a5b      	lsrs	r3, r3, #9
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	60fa      	str	r2, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c70:	e01b      	b.n	8004caa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <SDMMC_GetCmdResp3+0x1e>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	e003      	b.n	8004caa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	22c5      	movs	r2, #197	; 0xc5
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	10624dd3 	.word	0x10624dd3

08004cc0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cce:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <SDMMC_GetCmdResp6+0xe4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a35      	ldr	r2, [pc, #212]	; (8004da8 <SDMMC_GetCmdResp6+0xe8>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	1e5a      	subs	r2, r3, #1
 8004ce8:	61fa      	str	r2, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cf2:	e052      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ef      	beq.n	8004ce4 <SDMMC_GetCmdResp6+0x24>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ea      	bne.n	8004ce4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d20:	2304      	movs	r3, #4
 8004d22:	e03a      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e02f      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fbcb 	bl	80044d6 <SDIO_GetCommandResponse>
 8004d40:	4603      	mov	r3, r0
 8004d42:	461a      	mov	r2, r3
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d001      	beq.n	8004d4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e025      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	22c5      	movs	r2, #197	; 0xc5
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d54:	2100      	movs	r1, #0
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fbca 	bl	80044f0 <SDIO_GetResponse>
 8004d5c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e011      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d84:	e009      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d94:	e001      	b.n	8004d9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000
 8004da8:	10624dd3 	.word	0x10624dd3

08004dac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004db4:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <SDMMC_GetCmdResp7+0x94>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <SDMMC_GetCmdResp7+0x98>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	0a5b      	lsrs	r3, r3, #9
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	fb02 f303 	mul.w	r3, r2, r3
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	60fa      	str	r2, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dd8:	e02c      	b.n	8004e34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ef      	beq.n	8004dca <SDMMC_GetCmdResp7+0x1e>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ea      	bne.n	8004dca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2204      	movs	r2, #4
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e06:	2304      	movs	r3, #4
 8004e08:	e014      	b.n	8004e34 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e009      	b.n	8004e34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e32:	2300      	movs	r3, #0
  
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20000000 	.word	0x20000000
 8004e44:	10624dd3 	.word	0x10624dd3

08004e48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <SDMMC_GetCmdError+0x50>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <SDMMC_GetCmdError+0x54>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	0a5b      	lsrs	r3, r3, #9
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	60fa      	str	r2, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e74:	e009      	b.n	8004e8a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f1      	beq.n	8004e66 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	22c5      	movs	r2, #197	; 0xc5
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	10624dd3 	.word	0x10624dd3

08004ea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004ea4:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <MX_FATFS_Init+0x18>)
 8004ea6:	4805      	ldr	r0, [pc, #20]	; (8004ebc <MX_FATFS_Init+0x1c>)
 8004ea8:	f002 fb16 	bl	80074d8 <FATFS_LinkDriver>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <MX_FATFS_Init+0x20>)
 8004eb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000598 	.word	0x20000598
 8004ebc:	080075d0 	.word	0x080075d0
 8004ec0:	20000594 	.word	0x20000594

08004ec4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ec8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004ede:	f000 f879 	bl	8004fd4 <BSP_SD_IsDetected>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d001      	beq.n	8004eec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e012      	b.n	8004f12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004eec:	480b      	ldr	r0, [pc, #44]	; (8004f1c <BSP_SD_Init+0x48>)
 8004eee:	f7fd fe17 	bl	8002b20 <HAL_SD_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f00:	4806      	ldr	r0, [pc, #24]	; (8004f1c <BSP_SD_Init+0x48>)
 8004f02:	f7fe fbf1 	bl	80036e8 <HAL_SD_ConfigWideBusOperation>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004f10:	79fb      	ldrb	r3, [r7, #7]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000028 	.word	0x20000028

08004f20 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	4806      	ldr	r0, [pc, #24]	; (8004f58 <BSP_SD_ReadBlocks+0x38>)
 8004f3e:	f7fd fe9f 	bl	8002c80 <HAL_SD_ReadBlocks>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000028 	.word	0x20000028

08004f5c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	4806      	ldr	r0, [pc, #24]	; (8004f94 <BSP_SD_WriteBlocks+0x38>)
 8004f7a:	f7fe f85f 	bl	800303c <HAL_SD_WriteBlocks>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000028 	.word	0x20000028

08004f98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <BSP_SD_GetCardState+0x1c>)
 8004f9e:	f7fe fc3d 	bl	800381c <HAL_SD_GetCardState>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000028 	.word	0x20000028

08004fb8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <BSP_SD_GetCardInfo+0x18>)
 8004fc4:	f7fe fb64 	bl	8003690 <HAL_SD_GetCardInfo>
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000028 	.word	0x20000028

08004fd4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004fde:	f000 f80b 	bl	8004ff8 <BSP_PlatformIsDetected>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	b2db      	uxtb	r3, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004ffe:	2301      	movs	r3, #1
 8005000:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005002:	2140      	movs	r1, #64	; 0x40
 8005004:	4806      	ldr	r0, [pc, #24]	; (8005020 <BSP_PlatformIsDetected+0x28>)
 8005006:	f7fc fc2d 	bl	8001864 <HAL_GPIO_ReadPin>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005010:	2300      	movs	r3, #0
 8005012:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005014:	79fb      	ldrb	r3, [r7, #7]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40020800 	.word	0x40020800

08005024 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <SD_CheckStatus+0x38>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005034:	f7ff ffb0 	bl	8004f98 <BSP_SD_GetCardState>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <SD_CheckStatus+0x38>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <SD_CheckStatus+0x38>)
 800504c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <SD_CheckStatus+0x38>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000009 	.word	0x20000009

08005060 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <SD_initialize+0x38>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005070:	f7ff ff30 	bl	8004ed4 <BSP_SD_Init>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ffd1 	bl	8005024 <SD_CheckStatus>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <SD_initialize+0x38>)
 8005088:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800508a:	4b03      	ldr	r3, [pc, #12]	; (8005098 <SD_initialize+0x38>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b2db      	uxtb	r3, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000009 	.word	0x20000009

0800509c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ffbb 	bl	8005024 <SD_CheckStatus>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4603      	mov	r3, r0
 80050c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	68b8      	ldr	r0, [r7, #8]
 80050d6:	f7ff ff23 	bl	8004f20 <BSP_SD_ReadBlocks>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80050e0:	bf00      	nop
 80050e2:	f7ff ff59 	bl	8004f98 <BSP_SD_GetCardState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1fa      	bne.n	80050e2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4603      	mov	r3, r0
 8005108:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	68b8      	ldr	r0, [r7, #8]
 8005118:	f7ff ff20 	bl	8004f5c <BSP_SD_WriteBlocks>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d107      	bne.n	8005132 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005122:	bf00      	nop
 8005124:	f7ff ff38 	bl	8004f98 <BSP_SD_GetCardState>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1fa      	bne.n	8005124 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005132:	7dfb      	ldrb	r3, [r7, #23]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08c      	sub	sp, #48	; 0x30
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	603a      	str	r2, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
 8005148:	460b      	mov	r3, r1
 800514a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005152:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <SD_ioctl+0xac>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <SD_ioctl+0x28>
 8005160:	2303      	movs	r3, #3
 8005162:	e03c      	b.n	80051de <SD_ioctl+0xa2>

  switch (cmd)
 8005164:	79bb      	ldrb	r3, [r7, #6]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d834      	bhi.n	80051d4 <SD_ioctl+0x98>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <SD_ioctl+0x34>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	08005189 	.word	0x08005189
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051bb 	.word	0x080051bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005186:	e028      	b.n	80051da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff13 	bl	8004fb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800519e:	e01c      	b.n	80051da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80051a0:	f107 030c 	add.w	r3, r7, #12
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff ff07 	bl	8004fb8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051b8:	e00f      	b.n	80051da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80051ba:	f107 030c 	add.w	r3, r7, #12
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fefa 	bl	8004fb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	0a5a      	lsrs	r2, r3, #9
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80051d2:	e002      	b.n	80051da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80051da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3730      	adds	r7, #48	; 0x30
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000009 	.word	0x20000009

080051ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <disk_status+0x30>)
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	79fa      	ldrb	r2, [r7, #7]
 8005204:	4905      	ldr	r1, [pc, #20]	; (800521c <disk_status+0x30>)
 8005206:	440a      	add	r2, r1
 8005208:	7a12      	ldrb	r2, [r2, #8]
 800520a:	4610      	mov	r0, r2
 800520c:	4798      	blx	r3
 800520e:	4603      	mov	r3, r0
 8005210:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	200005c4 	.word	0x200005c4

08005220 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <disk_initialize+0x48>)
 8005232:	5cd3      	ldrb	r3, [r2, r3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d111      	bne.n	800525c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <disk_initialize+0x48>)
 800523c:	2101      	movs	r1, #1
 800523e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <disk_initialize+0x48>)
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	79fa      	ldrb	r2, [r7, #7]
 800524e:	4906      	ldr	r1, [pc, #24]	; (8005268 <disk_initialize+0x48>)
 8005250:	440a      	add	r2, r1
 8005252:	7a12      	ldrb	r2, [r2, #8]
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200005c4 	.word	0x200005c4

0800526c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <disk_read+0x3c>)
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	689c      	ldr	r4, [r3, #8]
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <disk_read+0x3c>)
 800528c:	4413      	add	r3, r2
 800528e:	7a18      	ldrb	r0, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	47a0      	blx	r4
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
  return res;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200005c4 	.word	0x200005c4

080052ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <disk_write+0x3c>)
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68dc      	ldr	r4, [r3, #12]
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <disk_write+0x3c>)
 80052cc:	4413      	add	r3, r2
 80052ce:	7a18      	ldrb	r0, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	47a0      	blx	r4
 80052d8:	4603      	mov	r3, r0
 80052da:	75fb      	strb	r3, [r7, #23]
  return res;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200005c4 	.word	0x200005c4

080052ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	603a      	str	r2, [r7, #0]
 80052f6:	71fb      	strb	r3, [r7, #7]
 80052f8:	460b      	mov	r3, r1
 80052fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <disk_ioctl+0x38>)
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	4906      	ldr	r1, [pc, #24]	; (8005324 <disk_ioctl+0x38>)
 800530c:	440a      	add	r2, r1
 800530e:	7a10      	ldrb	r0, [r2, #8]
 8005310:	79b9      	ldrb	r1, [r7, #6]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	4798      	blx	r3
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]
  return res;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200005c4 	.word	0x200005c4

08005328 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	b21a      	sxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b21b      	sxth	r3, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	b21b      	sxth	r3, r3
 8005348:	81fb      	strh	r3, [r7, #14]
	return rv;
 800534a:	89fb      	ldrh	r3, [r7, #14]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3303      	adds	r3, #3
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	3202      	adds	r2, #2
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	3201      	adds	r2, #1
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005390:	68fb      	ldr	r3, [r7, #12]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	887b      	ldrh	r3, [r7, #2]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	1c53      	adds	r3, r2, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	6179      	str	r1, [r7, #20]
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3b01      	subs	r3, #1
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f1      	bne.n	8005446 <mem_cpy+0x1a>
	}
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	617a      	str	r2, [r7, #20]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f3      	bne.n	800547e <mem_set+0x10>
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	61ba      	str	r2, [r7, #24]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	1acb      	subs	r3, r1, r3
 80054d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <mem_cmp+0x40>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0eb      	beq.n	80054bc <mem_cmp+0x18>

	return r;
 80054e4:	697b      	ldr	r3, [r7, #20]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3724      	adds	r7, #36	; 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80054fc:	e002      	b.n	8005504 <chk_chr+0x12>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3301      	adds	r3, #1
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <chk_chr+0x26>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	4293      	cmp	r3, r2
 8005516:	d1f2      	bne.n	80054fe <chk_chr+0xc>
	return *str;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	781b      	ldrb	r3, [r3, #0]
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e029      	b.n	8005590 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800553c:	4a27      	ldr	r2, [pc, #156]	; (80055dc <chk_lock+0xb4>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	4413      	add	r3, r2
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01d      	beq.n	8005586 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800554a:	4a24      	ldr	r2, [pc, #144]	; (80055dc <chk_lock+0xb4>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4413      	add	r3, r2
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d116      	bne.n	800558a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800555c:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <chk_lock+0xb4>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	4413      	add	r3, r2
 8005564:	3304      	adds	r3, #4
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800556c:	429a      	cmp	r2, r3
 800556e:	d10c      	bne.n	800558a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <chk_lock+0xb4>)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	4413      	add	r3, r2
 8005578:	3308      	adds	r3, #8
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005580:	429a      	cmp	r2, r3
 8005582:	d102      	bne.n	800558a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005584:	e007      	b.n	8005596 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d9d2      	bls.n	800553c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d109      	bne.n	80055b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <chk_lock+0x80>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d101      	bne.n	80055ac <chk_lock+0x84>
 80055a8:	2300      	movs	r3, #0
 80055aa:	e010      	b.n	80055ce <chk_lock+0xa6>
 80055ac:	2312      	movs	r3, #18
 80055ae:	e00e      	b.n	80055ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d108      	bne.n	80055c8 <chk_lock+0xa0>
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <chk_lock+0xb4>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	4413      	add	r3, r2
 80055be:	330c      	adds	r3, #12
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c6:	d101      	bne.n	80055cc <chk_lock+0xa4>
 80055c8:	2310      	movs	r3, #16
 80055ca:	e000      	b.n	80055ce <chk_lock+0xa6>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200005a4 	.word	0x200005a4

080055e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	e002      	b.n	80055f2 <enq_lock+0x12>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3301      	adds	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d806      	bhi.n	8005606 <enq_lock+0x26>
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <enq_lock+0x40>)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4413      	add	r3, r2
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f2      	bne.n	80055ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b02      	cmp	r3, #2
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200005a4 	.word	0x200005a4

08005624 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e01f      	b.n	8005674 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005634:	4a41      	ldr	r2, [pc, #260]	; (800573c <inc_lock+0x118>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4413      	add	r3, r2
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d113      	bne.n	800566e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005646:	4a3d      	ldr	r2, [pc, #244]	; (800573c <inc_lock+0x118>)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	3304      	adds	r3, #4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005656:	429a      	cmp	r2, r3
 8005658:	d109      	bne.n	800566e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800565a:	4a38      	ldr	r2, [pc, #224]	; (800573c <inc_lock+0x118>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	3308      	adds	r3, #8
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800566a:	429a      	cmp	r2, r3
 800566c:	d006      	beq.n	800567c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d9dc      	bls.n	8005634 <inc_lock+0x10>
 800567a:	e000      	b.n	800567e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800567c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d132      	bne.n	80056ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e002      	b.n	8005690 <inc_lock+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d806      	bhi.n	80056a4 <inc_lock+0x80>
 8005696:	4a29      	ldr	r2, [pc, #164]	; (800573c <inc_lock+0x118>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	4413      	add	r3, r2
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f2      	bne.n	800568a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d101      	bne.n	80056ae <inc_lock+0x8a>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e040      	b.n	8005730 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4922      	ldr	r1, [pc, #136]	; (800573c <inc_lock+0x118>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	440b      	add	r3, r1
 80056ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	491e      	ldr	r1, [pc, #120]	; (800573c <inc_lock+0x118>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	440b      	add	r3, r1
 80056c8:	3304      	adds	r3, #4
 80056ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	491a      	ldr	r1, [pc, #104]	; (800573c <inc_lock+0x118>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	440b      	add	r3, r1
 80056d8:	3308      	adds	r3, #8
 80056da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <inc_lock+0x118>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	4413      	add	r3, r2
 80056e4:	330c      	adds	r3, #12
 80056e6:	2200      	movs	r2, #0
 80056e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d009      	beq.n	8005704 <inc_lock+0xe0>
 80056f0:	4a12      	ldr	r2, [pc, #72]	; (800573c <inc_lock+0x118>)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	4413      	add	r3, r2
 80056f8:	330c      	adds	r3, #12
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <inc_lock+0xe0>
 8005700:	2300      	movs	r3, #0
 8005702:	e015      	b.n	8005730 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <inc_lock+0xf8>
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <inc_lock+0x118>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	4413      	add	r3, r2
 8005712:	330c      	adds	r3, #12
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	e001      	b.n	8005720 <inc_lock+0xfc>
 800571c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005720:	4906      	ldr	r1, [pc, #24]	; (800573c <inc_lock+0x118>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	440b      	add	r3, r1
 8005728:	330c      	adds	r3, #12
 800572a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	200005a4 	.word	0x200005a4

08005740 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3b01      	subs	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d825      	bhi.n	80057a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <dec_lock+0x74>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	4413      	add	r3, r2
 800575c:	330c      	adds	r3, #12
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d101      	bne.n	800576e <dec_lock+0x2e>
 800576a:	2300      	movs	r3, #0
 800576c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800576e:	89fb      	ldrh	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <dec_lock+0x3a>
 8005774:	89fb      	ldrh	r3, [r7, #14]
 8005776:	3b01      	subs	r3, #1
 8005778:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800577a:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <dec_lock+0x74>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	330c      	adds	r3, #12
 8005784:	89fa      	ldrh	r2, [r7, #14]
 8005786:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005788:	89fb      	ldrh	r3, [r7, #14]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <dec_lock+0x5a>
 800578e:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <dec_lock+0x74>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	4413      	add	r3, r2
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	737b      	strb	r3, [r7, #13]
 800579e:	e001      	b.n	80057a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80057a0:	2302      	movs	r3, #2
 80057a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80057a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	200005a4 	.word	0x200005a4

080057b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e010      	b.n	80057e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057c6:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <clear_lock+0x44>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	4413      	add	r3, r2
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d105      	bne.n	80057e2 <clear_lock+0x2a>
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <clear_lock+0x44>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	4413      	add	r3, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d9eb      	bls.n	80057c6 <clear_lock+0xe>
	}
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200005a4 	.word	0x200005a4

08005800 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	78db      	ldrb	r3, [r3, #3]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d034      	beq.n	800587e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7858      	ldrb	r0, [r3, #1]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005824:	2301      	movs	r3, #1
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	f7ff fd40 	bl	80052ac <disk_write>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e022      	b.n	800587e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	1ad2      	subs	r2, r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	429a      	cmp	r2, r3
 800584c:	d217      	bcs.n	800587e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	789b      	ldrb	r3, [r3, #2]
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	e010      	b.n	8005878 <sync_window+0x78>
					wsect += fs->fsize;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	7858      	ldrb	r0, [r3, #1]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800586a:	2301      	movs	r3, #1
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	f7ff fd1d 	bl	80052ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3b01      	subs	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d8eb      	bhi.n	8005856 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d01b      	beq.n	80058d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ffad 	bl	8005800 <sync_window>
 80058a6:	4603      	mov	r3, r0
 80058a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d113      	bne.n	80058d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7858      	ldrb	r0, [r3, #1]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058ba:	2301      	movs	r3, #1
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	f7ff fcd5 	bl	800526c <disk_read>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ff87 	bl	8005800 <sync_window>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d158      	bne.n	80059ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d148      	bne.n	8005996 <sync_fs+0xb2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d144      	bne.n	8005996 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3330      	adds	r3, #48	; 0x30
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fda9 	bl	800546e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3330      	adds	r3, #48	; 0x30
 8005920:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005924:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fd38 	bl	800539e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3330      	adds	r3, #48	; 0x30
 8005932:	4921      	ldr	r1, [pc, #132]	; (80059b8 <sync_fs+0xd4>)
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fd4d 	bl	80053d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3330      	adds	r3, #48	; 0x30
 800593e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005942:	491e      	ldr	r1, [pc, #120]	; (80059bc <sync_fs+0xd8>)
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fd45 	bl	80053d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3330      	adds	r3, #48	; 0x30
 800594e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7ff fd3b 	bl	80053d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3330      	adds	r3, #48	; 0x30
 8005962:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7ff fd31 	bl	80053d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7858      	ldrb	r0, [r3, #1]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	2301      	movs	r3, #1
 800598c:	f7ff fc8e 	bl	80052ac <disk_write>
			fs->fsi_flag = 0;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fca4 	bl	80052ec <disk_ioctl>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <sync_fs+0xca>
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	41615252 	.word	0x41615252
 80059bc:	61417272 	.word	0x61417272

080059c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	3b02      	subs	r3, #2
 80059ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	3b02      	subs	r3, #2
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d301      	bcc.n	80059e0 <clust2sect+0x20>
 80059dc:	2300      	movs	r3, #0
 80059de:	e008      	b.n	80059f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	895b      	ldrh	r3, [r3, #10]
 80059e4:	461a      	mov	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	4413      	add	r3, r2
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d904      	bls.n	8005a1e <get_fat+0x20>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e08f      	b.n	8005b44 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295
 8005a28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d062      	beq.n	8005af8 <get_fat+0xfa>
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	dc7c      	bgt.n	8005b30 <get_fat+0x132>
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d002      	beq.n	8005a40 <get_fat+0x42>
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d042      	beq.n	8005ac4 <get_fat+0xc6>
 8005a3e:	e077      	b.n	8005b30 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	0a5b      	lsrs	r3, r3, #9
 8005a56:	4413      	add	r3, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6938      	ldr	r0, [r7, #16]
 8005a5c:	f7ff ff14 	bl	8005888 <move_window>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d167      	bne.n	8005b36 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	60fa      	str	r2, [r7, #12]
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a78:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	4413      	add	r3, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	6938      	ldr	r0, [r7, #16]
 8005a88:	f7ff fefe 	bl	8005888 <move_window>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d153      	bne.n	8005b3a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <get_fat+0xbc>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	e002      	b.n	8005ac0 <get_fat+0xc2>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	617b      	str	r3, [r7, #20]
			break;
 8005ac2:	e03f      	b.n	8005b44 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	4413      	add	r3, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6938      	ldr	r0, [r7, #16]
 8005ad2:	f7ff fed9 	bl	8005888 <move_window>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d130      	bne.n	8005b3e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005aea:	4413      	add	r3, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fc1b 	bl	8005328 <ld_word>
 8005af2:	4603      	mov	r3, r0
 8005af4:	617b      	str	r3, [r7, #20]
			break;
 8005af6:	e025      	b.n	8005b44 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	09db      	lsrs	r3, r3, #7
 8005b00:	4413      	add	r3, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6938      	ldr	r0, [r7, #16]
 8005b06:	f7ff febf 	bl	8005888 <move_window>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d118      	bne.n	8005b42 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b1e:	4413      	add	r3, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fc19 	bl	8005358 <ld_dword>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b2c:	617b      	str	r3, [r7, #20]
			break;
 8005b2e:	e009      	b.n	8005b44 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e006      	b.n	8005b44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b36:	bf00      	nop
 8005b38:	e004      	b.n	8005b44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b3a:	bf00      	nop
 8005b3c:	e002      	b.n	8005b44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b3e:	bf00      	nop
 8005b40:	e000      	b.n	8005b44 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b42:	bf00      	nop
		}
	}

	return val;
 8005b44:	697b      	ldr	r3, [r7, #20]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b4e:	b590      	push	{r4, r7, lr}
 8005b50:	b089      	sub	sp, #36	; 0x24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f240 80d2 	bls.w	8005d0a <put_fat+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	f080 80cc 	bcs.w	8005d0a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	f000 8096 	beq.w	8005ca8 <put_fat+0x15a>
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	f300 80cd 	bgt.w	8005d1c <put_fat+0x1ce>
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d002      	beq.n	8005b8c <put_fat+0x3e>
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d06e      	beq.n	8005c68 <put_fat+0x11a>
 8005b8a:	e0c7      	b.n	8005d1c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	0a5b      	lsrs	r3, r3, #9
 8005ba2:	4413      	add	r3, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fe6e 	bl	8005888 <move_window>
 8005bac:	4603      	mov	r3, r0
 8005bae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f040 80ab 	bne.w	8005d0e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	61b9      	str	r1, [r7, #24]
 8005bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc8:	4413      	add	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <put_fat+0xa4>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	b25a      	sxtb	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e001      	b.n	8005bf6 <put_fat+0xa8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	0a5b      	lsrs	r3, r3, #9
 8005c08:	4413      	add	r3, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fe3b 	bl	8005888 <move_window>
 8005c12:	4603      	mov	r3, r0
 8005c14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d17a      	bne.n	8005d12 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	4413      	add	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <put_fat+0xf0>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e00e      	b.n	8005c5c <put_fat+0x10e>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	f023 030f 	bic.w	r3, r3, #15
 8005c48:	b25a      	sxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b25b      	sxtb	r3, r3
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	70da      	strb	r2, [r3, #3]
			break;
 8005c66:	e059      	b.n	8005d1c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	4413      	add	r3, r2
 8005c72:	4619      	mov	r1, r3
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff fe07 	bl	8005888 <move_window>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d148      	bne.n	8005d16 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c92:	4413      	add	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	b292      	uxth	r2, r2
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fb7f 	bl	800539e <st_word>
			fs->wflag = 1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	70da      	strb	r2, [r3, #3]
			break;
 8005ca6:	e039      	b.n	8005d1c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	4413      	add	r3, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fde7 	bl	8005888 <move_window>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d12a      	bne.n	8005d1a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005cd8:	4413      	add	r3, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fb3c 	bl	8005358 <ld_dword>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ce6:	4323      	orrs	r3, r4
 8005ce8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005cf8:	4413      	add	r3, r2
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fb69 	bl	80053d4 <st_dword>
			fs->wflag = 1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	70da      	strb	r2, [r3, #3]
			break;
 8005d08:	e008      	b.n	8005d1c <put_fat+0x1ce>
		}
	}
 8005d0a:	bf00      	nop
 8005d0c:	e006      	b.n	8005d1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005d1a:	bf00      	nop
	return res;
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3724      	adds	r7, #36	; 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}

08005d26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b088      	sub	sp, #32
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d904      	bls.n	8005d4c <remove_chain+0x26>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d301      	bcc.n	8005d50 <remove_chain+0x2a>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e04b      	b.n	8005de8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00c      	beq.n	8005d70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	69b8      	ldr	r0, [r7, #24]
 8005d5e:	f7ff fef6 	bl	8005b4e <put_fat>
 8005d62:	4603      	mov	r3, r0
 8005d64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <remove_chain+0x4a>
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	e03b      	b.n	8005de8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fe43 	bl	80059fe <get_fat>
 8005d78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d031      	beq.n	8005de4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <remove_chain+0x64>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e02e      	b.n	8005de8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d101      	bne.n	8005d96 <remove_chain+0x70>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e028      	b.n	8005de8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d96:	2200      	movs	r2, #0
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	69b8      	ldr	r0, [r7, #24]
 8005d9c:	f7ff fed7 	bl	8005b4e <put_fat>
 8005da0:	4603      	mov	r3, r0
 8005da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005da4:	7ffb      	ldrb	r3, [r7, #31]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <remove_chain+0x88>
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	e01c      	b.n	8005de8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	3b02      	subs	r3, #2
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d20b      	bcs.n	8005dd4 <remove_chain+0xae>
			fs->free_clst++;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3c6      	bcc.n	8005d70 <remove_chain+0x4a>
 8005de2:	e000      	b.n	8005de6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005de4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10d      	bne.n	8005e22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <create_chain+0x2c>
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d31b      	bcc.n	8005e54 <create_chain+0x64>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e018      	b.n	8005e54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fdea 	bl	80059fe <get_fat>
 8005e2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d801      	bhi.n	8005e36 <create_chain+0x46>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e070      	b.n	8005f18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d101      	bne.n	8005e42 <create_chain+0x52>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	e06a      	b.n	8005f18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d201      	bcs.n	8005e50 <create_chain+0x60>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	e063      	b.n	8005f18 <create_chain+0x128>
		scl = clst;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d307      	bcc.n	8005e78 <create_chain+0x88>
				ncl = 2;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d901      	bls.n	8005e78 <create_chain+0x88>
 8005e74:	2300      	movs	r3, #0
 8005e76:	e04f      	b.n	8005f18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fdbf 	bl	80059fe <get_fat>
 8005e80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00e      	beq.n	8005ea6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d003      	beq.n	8005e96 <create_chain+0xa6>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d101      	bne.n	8005e9a <create_chain+0xaa>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	e03e      	b.n	8005f18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d1da      	bne.n	8005e58 <create_chain+0x68>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e038      	b.n	8005f18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ea6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	69f9      	ldr	r1, [r7, #28]
 8005eae:	6938      	ldr	r0, [r7, #16]
 8005eb0:	f7ff fe4d 	bl	8005b4e <put_fat>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <create_chain+0xe2>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6938      	ldr	r0, [r7, #16]
 8005eca:	f7ff fe40 	bl	8005b4e <put_fat>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <create_chain+0x116>
		fs->last_clst = ncl;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	3b02      	subs	r3, #2
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d804      	bhi.n	8005ef6 <create_chain+0x106>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	791b      	ldrb	r3, [r3, #4]
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	711a      	strb	r2, [r3, #4]
 8005f04:	e007      	b.n	8005f16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d102      	bne.n	8005f12 <create_chain+0x122>
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	e000      	b.n	8005f14 <create_chain+0x124>
 8005f12:	2301      	movs	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	3304      	adds	r3, #4
 8005f36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	0a5b      	lsrs	r3, r3, #9
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	8952      	ldrh	r2, [r2, #10]
 8005f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	613a      	str	r2, [r7, #16]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <clmt_clust+0x3a>
 8005f56:	2300      	movs	r3, #0
 8005f58:	e010      	b.n	8005f7c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d307      	bcc.n	8005f72 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f70:	e7e9      	b.n	8005f46 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005f72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f9e:	d204      	bcs.n	8005faa <dir_sdi+0x22>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <dir_sdi+0x26>
		return FR_INT_ERR;
 8005faa:	2302      	movs	r3, #2
 8005fac:	e063      	b.n	8006076 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <dir_sdi+0x46>
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d902      	bls.n	8005fce <dir_sdi+0x46>
		clst = fs->dirbase;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10c      	bne.n	8005fee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	8912      	ldrh	r2, [r2, #8]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d301      	bcc.n	8005fe4 <dir_sdi+0x5c>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e048      	b.n	8006076 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	61da      	str	r2, [r3, #28]
 8005fec:	e029      	b.n	8006042 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	895b      	ldrh	r3, [r3, #10]
 8005ff2:	025b      	lsls	r3, r3, #9
 8005ff4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ff6:	e019      	b.n	800602c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fcfe 	bl	80059fe <get_fat>
 8006002:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d101      	bne.n	8006010 <dir_sdi+0x88>
 800600c:	2301      	movs	r3, #1
 800600e:	e032      	b.n	8006076 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d904      	bls.n	8006020 <dir_sdi+0x98>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	429a      	cmp	r2, r3
 800601e:	d301      	bcc.n	8006024 <dir_sdi+0x9c>
 8006020:	2302      	movs	r3, #2
 8006022:	e028      	b.n	8006076 <dir_sdi+0xee>
			ofs -= csz;
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	429a      	cmp	r2, r3
 8006032:	d2e1      	bcs.n	8005ff8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	6938      	ldr	r0, [r7, #16]
 8006038:	f7ff fcc2 	bl	80059c0 <clust2sect>
 800603c:	4602      	mov	r2, r0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <dir_sdi+0xcc>
 8006050:	2302      	movs	r3, #2
 8006052:	e010      	b.n	8006076 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	0a5b      	lsrs	r3, r3, #9
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	441a      	add	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	3320      	adds	r3, #32
 8006094:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <dir_next+0x28>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a4:	d301      	bcc.n	80060aa <dir_next+0x2c>
 80060a6:	2304      	movs	r3, #4
 80060a8:	e0aa      	b.n	8006200 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 8098 	bne.w	80061e6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	8912      	ldrh	r2, [r2, #8]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	f0c0 8088 	bcc.w	80061e6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	61da      	str	r2, [r3, #28]
 80060dc:	2304      	movs	r3, #4
 80060de:	e08f      	b.n	8006200 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	0a5b      	lsrs	r3, r3, #9
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	8952      	ldrh	r2, [r2, #10]
 80060e8:	3a01      	subs	r2, #1
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d17a      	bne.n	80061e6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7ff fc80 	bl	80059fe <get_fat>
 80060fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d801      	bhi.n	800610a <dir_next+0x8c>
 8006106:	2302      	movs	r3, #2
 8006108:	e07a      	b.n	8006200 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d101      	bne.n	8006116 <dir_next+0x98>
 8006112:	2301      	movs	r3, #1
 8006114:	e074      	b.n	8006200 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d358      	bcc.n	80061d2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	61da      	str	r2, [r3, #28]
 800612c:	2304      	movs	r3, #4
 800612e:	e067      	b.n	8006200 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7ff fe59 	bl	8005df0 <create_chain>
 800613e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <dir_next+0xcc>
 8006146:	2307      	movs	r3, #7
 8006148:	e05a      	b.n	8006200 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <dir_next+0xd6>
 8006150:	2302      	movs	r3, #2
 8006152:	e055      	b.n	8006200 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d101      	bne.n	8006160 <dir_next+0xe2>
 800615c:	2301      	movs	r3, #1
 800615e:	e04f      	b.n	8006200 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fb4d 	bl	8005800 <sync_window>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <dir_next+0xf2>
 800616c:	2301      	movs	r3, #1
 800616e:	e047      	b.n	8006200 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3330      	adds	r3, #48	; 0x30
 8006174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f977 	bl	800546e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fc1a 	bl	80059c0 <clust2sect>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
 8006192:	e012      	b.n	80061ba <dir_next+0x13c>
						fs->wflag = 1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fb30 	bl	8005800 <sync_window>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <dir_next+0x12c>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02a      	b.n	8006200 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3301      	adds	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	895b      	ldrh	r3, [r3, #10]
 80061be:	461a      	mov	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d3e6      	bcc.n	8006194 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff fbf0 	bl	80059c0 <clust2sect>
 80061e0:	4602      	mov	r2, r0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff feb4 	bl	8005f88 <dir_sdi>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d12b      	bne.n	8006282 <dir_alloc+0x7a>
		n = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4619      	mov	r1, r3
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fb27 	bl	8005888 <move_window>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11d      	bne.n	8006280 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2be5      	cmp	r3, #229	; 0xe5
 800624c:	d004      	beq.n	8006258 <dir_alloc+0x50>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3301      	adds	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d102      	bne.n	800626c <dir_alloc+0x64>
 8006266:	e00c      	b.n	8006282 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800626c:	2101      	movs	r1, #1
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff ff05 	bl	800607e <dir_next>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0d7      	beq.n	800622e <dir_alloc+0x26>
 800627e:	e000      	b.n	8006282 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006280:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d101      	bne.n	800628c <dir_alloc+0x84>
 8006288:	2307      	movs	r3, #7
 800628a:	75fb      	strb	r3, [r7, #23]
	return res;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	331a      	adds	r3, #26
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f83f 	bl	8005328 <ld_word>
 80062aa:	4603      	mov	r3, r0
 80062ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d109      	bne.n	80062ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff f834 	bl	8005328 <ld_word>
 80062c0:	4603      	mov	r3, r0
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	331a      	adds	r3, #26
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	b292      	uxth	r2, r2
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f857 	bl	800539e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d109      	bne.n	800630c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f103 0214 	add.w	r2, r3, #20
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b29b      	uxth	r3, r3
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7ff f849 	bl	800539e <st_word>
	}
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006322:	2100      	movs	r1, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fe2f 	bl	8005f88 <dir_sdi>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <dir_find+0x24>
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	e03e      	b.n	80063b6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4619      	mov	r1, r3
 800633e:	6938      	ldr	r0, [r7, #16]
 8006340:	f7ff faa2 	bl	8005888 <move_window>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d12f      	bne.n	80063ae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <dir_find+0x4e>
 800635c:	2304      	movs	r3, #4
 800635e:	75fb      	strb	r3, [r7, #23]
 8006360:	e028      	b.n	80063b4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	330b      	adds	r3, #11
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	330b      	adds	r3, #11
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <dir_find+0x86>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a18      	ldr	r0, [r3, #32]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	220b      	movs	r2, #11
 800638e:	4619      	mov	r1, r3
 8006390:	f7ff f888 	bl	80054a4 <mem_cmp>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800639a:	2100      	movs	r1, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fe6e 	bl	800607e <dir_next>
 80063a2:	4603      	mov	r3, r0
 80063a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0c5      	beq.n	8006338 <dir_find+0x24>
 80063ac:	e002      	b.n	80063b4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80063b2:	bf00      	nop

	return res;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80063cc:	2101      	movs	r1, #1
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff ff1a 	bl	8006208 <dir_alloc>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d11c      	bne.n	8006418 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	4619      	mov	r1, r3
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f7ff fa4f 	bl	8005888 <move_window>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d111      	bne.n	8006418 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	2220      	movs	r2, #32
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff f836 	bl	800546e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a18      	ldr	r0, [r3, #32]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	220b      	movs	r2, #11
 800640c:	4619      	mov	r1, r3
 800640e:	f7ff f80d 	bl	800542c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2201      	movs	r2, #1
 8006416:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800643a:	220b      	movs	r2, #11
 800643c:	2120      	movs	r1, #32
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7ff f815 	bl	800546e <mem_set>
	si = i = 0; ni = 8;
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	2308      	movs	r3, #8
 800644e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	61fa      	str	r2, [r7, #28]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800645e:	7efb      	ldrb	r3, [r7, #27]
 8006460:	2b20      	cmp	r3, #32
 8006462:	d94e      	bls.n	8006502 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006464:	7efb      	ldrb	r3, [r7, #27]
 8006466:	2b2f      	cmp	r3, #47	; 0x2f
 8006468:	d006      	beq.n	8006478 <create_name+0x54>
 800646a:	7efb      	ldrb	r3, [r7, #27]
 800646c:	2b5c      	cmp	r3, #92	; 0x5c
 800646e:	d110      	bne.n	8006492 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006470:	e002      	b.n	8006478 <create_name+0x54>
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3301      	adds	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b2f      	cmp	r3, #47	; 0x2f
 8006482:	d0f6      	beq.n	8006472 <create_name+0x4e>
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b5c      	cmp	r3, #92	; 0x5c
 800648e:	d0f0      	beq.n	8006472 <create_name+0x4e>
			break;
 8006490:	e038      	b.n	8006504 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006492:	7efb      	ldrb	r3, [r7, #27]
 8006494:	2b2e      	cmp	r3, #46	; 0x2e
 8006496:	d003      	beq.n	80064a0 <create_name+0x7c>
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	429a      	cmp	r2, r3
 800649e:	d30c      	bcc.n	80064ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b0b      	cmp	r3, #11
 80064a4:	d002      	beq.n	80064ac <create_name+0x88>
 80064a6:	7efb      	ldrb	r3, [r7, #27]
 80064a8:	2b2e      	cmp	r3, #46	; 0x2e
 80064aa:	d001      	beq.n	80064b0 <create_name+0x8c>
 80064ac:	2306      	movs	r3, #6
 80064ae:	e044      	b.n	800653a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80064b0:	2308      	movs	r3, #8
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	230b      	movs	r3, #11
 80064b6:	617b      	str	r3, [r7, #20]
			continue;
 80064b8:	e022      	b.n	8006500 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80064ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da04      	bge.n	80064cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80064c2:	7efb      	ldrb	r3, [r7, #27]
 80064c4:	3b80      	subs	r3, #128	; 0x80
 80064c6:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <create_name+0x120>)
 80064c8:	5cd3      	ldrb	r3, [r2, r3]
 80064ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80064cc:	7efb      	ldrb	r3, [r7, #27]
 80064ce:	4619      	mov	r1, r3
 80064d0:	481d      	ldr	r0, [pc, #116]	; (8006548 <create_name+0x124>)
 80064d2:	f7ff f80e 	bl	80054f2 <chk_chr>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <create_name+0xbc>
 80064dc:	2306      	movs	r3, #6
 80064de:	e02c      	b.n	800653a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80064e0:	7efb      	ldrb	r3, [r7, #27]
 80064e2:	2b60      	cmp	r3, #96	; 0x60
 80064e4:	d905      	bls.n	80064f2 <create_name+0xce>
 80064e6:	7efb      	ldrb	r3, [r7, #27]
 80064e8:	2b7a      	cmp	r3, #122	; 0x7a
 80064ea:	d802      	bhi.n	80064f2 <create_name+0xce>
 80064ec:	7efb      	ldrb	r3, [r7, #27]
 80064ee:	3b20      	subs	r3, #32
 80064f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	613a      	str	r2, [r7, #16]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	4413      	add	r3, r2
 80064fc:	7efa      	ldrb	r2, [r7, #27]
 80064fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006500:	e7a6      	b.n	8006450 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006502:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	441a      	add	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <create_name+0xf4>
 8006514:	2306      	movs	r3, #6
 8006516:	e010      	b.n	800653a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2be5      	cmp	r3, #229	; 0xe5
 800651e:	d102      	bne.n	8006526 <create_name+0x102>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2205      	movs	r2, #5
 8006524:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006526:	7efb      	ldrb	r3, [r7, #27]
 8006528:	2b20      	cmp	r3, #32
 800652a:	d801      	bhi.n	8006530 <create_name+0x10c>
 800652c:	2204      	movs	r2, #4
 800652e:	e000      	b.n	8006532 <create_name+0x10e>
 8006530:	2200      	movs	r2, #0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	330b      	adds	r3, #11
 8006536:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006538:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	080075e4 	.word	0x080075e4
 8006548:	08007574 	.word	0x08007574

0800654c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006560:	e002      	b.n	8006568 <follow_path+0x1c>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b2f      	cmp	r3, #47	; 0x2f
 800656e:	d0f8      	beq.n	8006562 <follow_path+0x16>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b5c      	cmp	r3, #92	; 0x5c
 8006576:	d0f4      	beq.n	8006562 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b1f      	cmp	r3, #31
 8006584:	d80a      	bhi.n	800659c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fcf9 	bl	8005f88 <dir_sdi>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
 800659a:	e043      	b.n	8006624 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800659c:	463b      	mov	r3, r7
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff3f 	bl	8006424 <create_name>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d134      	bne.n	800661a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff feaf 	bl	8006314 <dir_find>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d127      	bne.n	800661e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d122      	bne.n	800661e <follow_path+0xd2>
 80065d8:	2305      	movs	r3, #5
 80065da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80065dc:	e01f      	b.n	800661e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11c      	bne.n	8006622 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	799b      	ldrb	r3, [r3, #6]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80065f4:	2305      	movs	r3, #5
 80065f6:	75fb      	strb	r3, [r7, #23]
 80065f8:	e014      	b.n	8006624 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	4413      	add	r3, r2
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fe42 	bl	8006296 <ld_clust>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006618:	e7c0      	b.n	800659c <follow_path+0x50>
			if (res != FR_OK) break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <follow_path+0xd8>
				break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006622:	bf00      	nop
			}
		}
	}

	return res;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800662e:	b480      	push	{r7}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d031      	beq.n	80066a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e002      	b.n	8006652 <get_ldnumber+0x24>
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3301      	adds	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b20      	cmp	r3, #32
 8006658:	d903      	bls.n	8006662 <get_ldnumber+0x34>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b3a      	cmp	r3, #58	; 0x3a
 8006660:	d1f4      	bne.n	800664c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b3a      	cmp	r3, #58	; 0x3a
 8006668:	d11c      	bne.n	80066a4 <get_ldnumber+0x76>
			tp = *path;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	60fa      	str	r2, [r7, #12]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	3b30      	subs	r3, #48	; 0x30
 800667a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b09      	cmp	r3, #9
 8006680:	d80e      	bhi.n	80066a0 <get_ldnumber+0x72>
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	429a      	cmp	r2, r3
 8006688:	d10a      	bne.n	80066a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d107      	bne.n	80066a0 <get_ldnumber+0x72>
					vol = (int)i;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3301      	adds	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	e002      	b.n	80066aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80066a8:	693b      	ldr	r3, [r7, #16]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	70da      	strb	r2, [r3, #3]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f8d8 	bl	8005888 <move_window>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <check_fs+0x2a>
 80066de:	2304      	movs	r3, #4
 80066e0:	e038      	b.n	8006754 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3330      	adds	r3, #48	; 0x30
 80066e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fe1c 	bl	8005328 <ld_word>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <check_fs+0x48>
 80066fc:	2303      	movs	r3, #3
 80066fe:	e029      	b.n	8006754 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006706:	2be9      	cmp	r3, #233	; 0xe9
 8006708:	d009      	beq.n	800671e <check_fs+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006710:	2beb      	cmp	r3, #235	; 0xeb
 8006712:	d11e      	bne.n	8006752 <check_fs+0x9a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800671a:	2b90      	cmp	r3, #144	; 0x90
 800671c:	d119      	bne.n	8006752 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3330      	adds	r3, #48	; 0x30
 8006722:	3336      	adds	r3, #54	; 0x36
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fe17 	bl	8005358 <ld_dword>
 800672a:	4603      	mov	r3, r0
 800672c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <check_fs+0xa4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d101      	bne.n	800673a <check_fs+0x82>
 8006736:	2300      	movs	r3, #0
 8006738:	e00c      	b.n	8006754 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3330      	adds	r3, #48	; 0x30
 800673e:	3352      	adds	r3, #82	; 0x52
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fe09 	bl	8005358 <ld_dword>
 8006746:	4603      	mov	r3, r0
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <check_fs+0xa8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d101      	bne.n	8006752 <check_fs+0x9a>
 800674e:	2300      	movs	r3, #0
 8006750:	e000      	b.n	8006754 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006752:	2302      	movs	r3, #2
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	00544146 	.word	0x00544146
 8006760:	33544146 	.word	0x33544146

08006764 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b096      	sub	sp, #88	; 0x58
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff58 	bl	800662e <get_ldnumber>
 800677e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	2b00      	cmp	r3, #0
 8006784:	da01      	bge.n	800678a <find_volume+0x26>
 8006786:	230b      	movs	r3, #11
 8006788:	e22d      	b.n	8006be6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800678a:	4aa1      	ldr	r2, [pc, #644]	; (8006a10 <find_volume+0x2ac>)
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006792:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <find_volume+0x3a>
 800679a:	230c      	movs	r3, #12
 800679c:	e223      	b.n	8006be6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fd17 	bl	80051ec <disk_status>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80067c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <find_volume+0x82>
 80067d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80067e2:	230a      	movs	r3, #10
 80067e4:	e1ff      	b.n	8006be6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80067e6:	2300      	movs	r3, #0
 80067e8:	e1fd      	b.n	8006be6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fd0f 	bl	8005220 <disk_initialize>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006814:	2303      	movs	r3, #3
 8006816:	e1e6      	b.n	8006be6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <find_volume+0xca>
 800681e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800682a:	230a      	movs	r3, #10
 800682c:	e1db      	b.n	8006be6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006832:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006836:	f7ff ff3f 	bl	80066b8 <check_fs>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006844:	2b02      	cmp	r3, #2
 8006846:	d149      	bne.n	80068dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006848:	2300      	movs	r3, #0
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	e01e      	b.n	800688c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800685c:	4413      	add	r3, r2
 800685e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	3304      	adds	r3, #4
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <find_volume+0x114>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	3308      	adds	r3, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fd72 	bl	8005358 <ld_dword>
 8006874:	4602      	mov	r2, r0
 8006876:	e000      	b.n	800687a <find_volume+0x116>
 8006878:	2200      	movs	r2, #0
 800687a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	3358      	adds	r3, #88	; 0x58
 8006880:	443b      	add	r3, r7
 8006882:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	3301      	adds	r3, #1
 800688a:	643b      	str	r3, [r7, #64]	; 0x40
 800688c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688e:	2b03      	cmp	r3, #3
 8006890:	d9dd      	bls.n	800684e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006892:	2300      	movs	r3, #0
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <find_volume+0x13e>
 800689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689e:	3b01      	subs	r3, #1
 80068a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80068a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	3358      	adds	r3, #88	; 0x58
 80068a8:	443b      	add	r3, r7
 80068aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80068ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80068b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <find_volume+0x15e>
 80068b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068ba:	f7ff fefd 	bl	80066b8 <check_fs>
 80068be:	4603      	mov	r3, r0
 80068c0:	e000      	b.n	80068c4 <find_volume+0x160>
 80068c2:	2303      	movs	r3, #3
 80068c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d905      	bls.n	80068dc <find_volume+0x178>
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	3301      	adds	r3, #1
 80068d4:	643b      	str	r3, [r7, #64]	; 0x40
 80068d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d9e2      	bls.n	80068a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d101      	bne.n	80068e8 <find_volume+0x184>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e17e      	b.n	8006be6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d901      	bls.n	80068f4 <find_volume+0x190>
 80068f0:	230d      	movs	r3, #13
 80068f2:	e178      	b.n	8006be6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	3330      	adds	r3, #48	; 0x30
 80068f8:	330b      	adds	r3, #11
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fd14 	bl	8005328 <ld_word>
 8006900:	4603      	mov	r3, r0
 8006902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006906:	d001      	beq.n	800690c <find_volume+0x1a8>
 8006908:	230d      	movs	r3, #13
 800690a:	e16c      	b.n	8006be6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	3330      	adds	r3, #48	; 0x30
 8006910:	3316      	adds	r3, #22
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fd08 	bl	8005328 <ld_word>
 8006918:	4603      	mov	r3, r0
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800691c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <find_volume+0x1cc>
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	3330      	adds	r3, #48	; 0x30
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fd15 	bl	8005358 <ld_dword>
 800692e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006934:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	789b      	ldrb	r3, [r3, #2]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d005      	beq.n	8006954 <find_volume+0x1f0>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	789b      	ldrb	r3, [r3, #2]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d001      	beq.n	8006954 <find_volume+0x1f0>
 8006950:	230d      	movs	r3, #13
 8006952:	e148      	b.n	8006be6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	789b      	ldrb	r3, [r3, #2]
 8006958:	461a      	mov	r2, r3
 800695a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	b29a      	uxth	r2, r3
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	895b      	ldrh	r3, [r3, #10]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <find_volume+0x224>
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	895b      	ldrh	r3, [r3, #10]
 800697a:	461a      	mov	r2, r3
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	895b      	ldrh	r3, [r3, #10]
 8006980:	3b01      	subs	r3, #1
 8006982:	4013      	ands	r3, r2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <find_volume+0x228>
 8006988:	230d      	movs	r3, #13
 800698a:	e12c      	b.n	8006be6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	3330      	adds	r3, #48	; 0x30
 8006990:	3311      	adds	r3, #17
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fcc8 	bl	8005328 <ld_word>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	891b      	ldrh	r3, [r3, #8]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <find_volume+0x24e>
 80069ae:	230d      	movs	r3, #13
 80069b0:	e119      	b.n	8006be6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	3330      	adds	r3, #48	; 0x30
 80069b6:	3313      	adds	r3, #19
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fcb5 	bl	8005328 <ld_word>
 80069be:	4603      	mov	r3, r0
 80069c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <find_volume+0x272>
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	3330      	adds	r3, #48	; 0x30
 80069cc:	3320      	adds	r3, #32
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fcc2 	bl	8005358 <ld_dword>
 80069d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	3330      	adds	r3, #48	; 0x30
 80069da:	330e      	adds	r3, #14
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe fca3 	bl	8005328 <ld_word>
 80069e2:	4603      	mov	r3, r0
 80069e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <find_volume+0x28c>
 80069ec:	230d      	movs	r3, #13
 80069ee:	e0fa      	b.n	8006be6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f4:	4413      	add	r3, r2
 80069f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f8:	8912      	ldrh	r2, [r2, #8]
 80069fa:	0912      	lsrs	r2, r2, #4
 80069fc:	b292      	uxth	r2, r2
 80069fe:	4413      	add	r3, r2
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d204      	bcs.n	8006a14 <find_volume+0x2b0>
 8006a0a:	230d      	movs	r3, #13
 8006a0c:	e0eb      	b.n	8006be6 <find_volume+0x482>
 8006a0e:	bf00      	nop
 8006a10:	2000059c 	.word	0x2000059c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1c:	8952      	ldrh	r2, [r2, #10]
 8006a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <find_volume+0x2ca>
 8006a2a:	230d      	movs	r3, #13
 8006a2c:	e0db      	b.n	8006be6 <find_volume+0x482>
		fmt = FS_FAT32;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d802      	bhi.n	8006a44 <find_volume+0x2e0>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d802      	bhi.n	8006a54 <find_volume+0x2f0>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a60:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a66:	441a      	add	r2, r3
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	441a      	add	r2, r3
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d11e      	bne.n	8006abc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	3330      	adds	r3, #48	; 0x30
 8006a82:	332a      	adds	r3, #42	; 0x2a
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fc4f 	bl	8005328 <ld_word>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <find_volume+0x330>
 8006a90:	230d      	movs	r3, #13
 8006a92:	e0a8      	b.n	8006be6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	891b      	ldrh	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <find_volume+0x33c>
 8006a9c:	230d      	movs	r3, #13
 8006a9e:	e0a2      	b.n	8006be6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	3330      	adds	r3, #48	; 0x30
 8006aa4:	332c      	adds	r3, #44	; 0x2c
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fc56 	bl	8005358 <ld_dword>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aba:	e01f      	b.n	8006afc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <find_volume+0x364>
 8006ac4:	230d      	movs	r3, #13
 8006ac6:	e08e      	b.n	8006be6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	441a      	add	r2, r3
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d103      	bne.n	8006ae4 <find_volume+0x380>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	e00a      	b.n	8006afa <find_volume+0x396>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	085a      	lsrs	r2, r3, #1
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006b06:	0a5b      	lsrs	r3, r3, #9
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d201      	bcs.n	8006b10 <find_volume+0x3ac>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e06a      	b.n	8006be6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	611a      	str	r2, [r3, #16]
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d149      	bne.n	8006bc2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	3330      	adds	r3, #48	; 0x30
 8006b32:	3330      	adds	r3, #48	; 0x30
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe fbf7 	bl	8005328 <ld_word>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d140      	bne.n	8006bc2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b42:	3301      	adds	r3, #1
 8006b44:	4619      	mov	r1, r3
 8006b46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b48:	f7fe fe9e 	bl	8005888 <move_window>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d137      	bne.n	8006bc2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2200      	movs	r2, #0
 8006b56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	3330      	adds	r3, #48	; 0x30
 8006b5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fbe1 	bl	8005328 <ld_word>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d127      	bne.n	8006bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	3330      	adds	r3, #48	; 0x30
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fbee 	bl	8005358 <ld_dword>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <find_volume+0x48c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d11e      	bne.n	8006bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	3330      	adds	r3, #48	; 0x30
 8006b88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fbe3 	bl	8005358 <ld_dword>
 8006b92:	4603      	mov	r3, r0
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <find_volume+0x490>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d113      	bne.n	8006bc2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	3330      	adds	r3, #48	; 0x30
 8006b9e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fbd8 	bl	8005358 <ld_dword>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	3330      	adds	r3, #48	; 0x30
 8006bb2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fbce 	bl	8005358 <ld_dword>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006bc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <find_volume+0x494>)
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <find_volume+0x494>)
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <find_volume+0x494>)
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006be0:	f7fe fdea 	bl	80057b8 <clear_lock>
#endif
	return FR_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3758      	adds	r7, #88	; 0x58
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	41615252 	.word	0x41615252
 8006bf4:	61417272 	.word	0x61417272
 8006bf8:	200005a0 	.word	0x200005a0

08006bfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c06:	2309      	movs	r3, #9
 8006c08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <validate+0x4e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d018      	beq.n	8006c4a <validate+0x4e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <validate+0x4e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	889a      	ldrh	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	88db      	ldrh	r3, [r3, #6]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d10c      	bne.n	8006c4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fad8 	bl	80051ec <disk_status>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <validate+0x4e>
			res = FR_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <validate+0x5a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	e000      	b.n	8006c58 <validate+0x5c>
 8006c56:	2300      	movs	r3, #0
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6013      	str	r3, [r2, #0]
	return res;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fcd5 	bl	800662e <get_ldnumber>
 8006c84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da01      	bge.n	8006c90 <f_mount+0x28>
 8006c8c:	230b      	movs	r3, #11
 8006c8e:	e02b      	b.n	8006ce8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <f_mount+0x88>)
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ca0:	69b8      	ldr	r0, [r7, #24]
 8006ca2:	f7fe fd89 	bl	80057b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	490d      	ldr	r1, [pc, #52]	; (8006cf0 <f_mount+0x88>)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <f_mount+0x66>
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <f_mount+0x6a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e00a      	b.n	8006ce8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006cd2:	f107 010c 	add.w	r1, r7, #12
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fd41 	bl	8006764 <find_volume>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2000059c 	.word	0x2000059c

08006cf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b098      	sub	sp, #96	; 0x60
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <f_open+0x18>
 8006d08:	2309      	movs	r3, #9
 8006d0a:	e1ad      	b.n	8007068 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d14:	79fa      	ldrb	r2, [r7, #7]
 8006d16:	f107 0110 	add.w	r1, r7, #16
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fd20 	bl	8006764 <find_volume>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 8191 	bne.w	8007056 <f_open+0x362>
		dj.obj.fs = fs;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	f107 0314 	add.w	r3, r7, #20
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fc03 	bl	800654c <follow_path>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d11a      	bne.n	8006d8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da03      	bge.n	8006d66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d5e:	2306      	movs	r3, #6
 8006d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d64:	e011      	b.n	8006d8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fbd2 	bl	8005528 <chk_lock>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	f003 031c 	and.w	r3, r3, #28
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d07f      	beq.n	8006e94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10e      	bne.n	8006dc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006da4:	f7fe fc1c 	bl	80055e0 <enq_lock>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d006      	beq.n	8006dbc <f_open+0xc8>
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fb03 	bl	80063be <dir_register>
 8006db8:	4603      	mov	r3, r0
 8006dba:	e000      	b.n	8006dbe <f_open+0xca>
 8006dbc:	2312      	movs	r3, #18
 8006dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f043 0308 	orr.w	r3, r3, #8
 8006dc8:	71fb      	strb	r3, [r7, #7]
 8006dca:	e010      	b.n	8006dee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006dcc:	7ebb      	ldrb	r3, [r7, #26]
 8006dce:	f003 0311 	and.w	r3, r3, #17
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <f_open+0xea>
					res = FR_DENIED;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ddc:	e007      	b.n	8006dee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <f_open+0xfa>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d168      	bne.n	8006ec8 <f_open+0x1d4>
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d063      	beq.n	8006ec8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e00:	f7fe f860 	bl	8004ec4 <get_fattime>
 8006e04:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	330e      	adds	r3, #14
 8006e0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fae1 	bl	80053d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	3316      	adds	r3, #22
 8006e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fadb 	bl	80053d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	330b      	adds	r3, #11
 8006e22:	2220      	movs	r2, #32
 8006e24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff fa32 	bl	8006296 <ld_clust>
 8006e32:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fa4a 	bl	80062d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	331c      	adds	r3, #28
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fac4 	bl	80053d4 <st_dword>
					fs->wflag = 1;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d037      	beq.n	8006ec8 <f_open+0x1d4>
						dw = fs->winsect;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e5e:	f107 0314 	add.w	r3, r7, #20
 8006e62:	2200      	movs	r2, #0
 8006e64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe ff5d 	bl	8005d26 <remove_chain>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d126      	bne.n	8006ec8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fd02 	bl	8005888 <move_window>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	60da      	str	r2, [r3, #12]
 8006e92:	e019      	b.n	8006ec8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d115      	bne.n	8006ec8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e9c:	7ebb      	ldrb	r3, [r7, #26]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <f_open+0x1ba>
					res = FR_NO_FILE;
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006eac:	e00c      	b.n	8006ec8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <f_open+0x1d4>
 8006eb8:	7ebb      	ldrb	r3, [r7, #26]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <f_open+0x1d4>
						res = FR_DENIED;
 8006ec2:	2307      	movs	r3, #7
 8006ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d128      	bne.n	8006f22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fb8b 	bl	8005624 <inc_lock>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <f_open+0x22e>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f040 8095 	bne.w	8007056 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff f9af 	bl	8006296 <ld_clust>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	331c      	adds	r3, #28
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fa08 	bl	8005358 <ld_dword>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	88da      	ldrh	r2, [r3, #6]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	79fa      	ldrb	r2, [r7, #7]
 8006f66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3330      	adds	r3, #48	; 0x30
 8006f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fe fa72 	bl	800546e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d060      	beq.n	8007056 <f_open+0x362>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05c      	beq.n	8007056 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	895b      	ldrh	r3, [r3, #10]
 8006fa8:	025b      	lsls	r3, r3, #9
 8006faa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb8:	e016      	b.n	8006fe8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fd1d 	bl	80059fe <get_fat>
 8006fc4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d802      	bhi.n	8006fd2 <f_open+0x2de>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d102      	bne.n	8006fe0 <f_open+0x2ec>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <f_open+0x304>
 8006ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d8e0      	bhi.n	8006fba <f_open+0x2c6>
				}
				fp->clust = clst;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ffc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007002:	2b00      	cmp	r3, #0
 8007004:	d127      	bne.n	8007056 <f_open+0x362>
 8007006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	2b00      	cmp	r3, #0
 800700e:	d022      	beq.n	8007056 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fcd3 	bl	80059c0 <clust2sect>
 800701a:	6478      	str	r0, [r7, #68]	; 0x44
 800701c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <f_open+0x336>
						res = FR_INT_ERR;
 8007022:	2302      	movs	r3, #2
 8007024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007028:	e015      	b.n	8007056 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800702a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800702c:	0a5a      	lsrs	r2, r3, #9
 800702e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	7858      	ldrb	r0, [r3, #1]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	2301      	movs	r3, #1
 8007046:	f7fe f911 	bl	800526c <disk_read>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <f_open+0x362>
 8007050:	2301      	movs	r3, #1
 8007052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <f_open+0x370>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007068:	4618      	mov	r0, r3
 800706a:	3760      	adds	r7, #96	; 0x60
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	; 0x38
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f107 0214 	add.w	r2, r7, #20
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fdb3 	bl	8006bfc <validate>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800709c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <f_read+0x44>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	7d5b      	ldrb	r3, [r3, #21]
 80070a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80070ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <f_read+0x4a>
 80070b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070b8:	e115      	b.n	80072e6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	7d1b      	ldrb	r3, [r3, #20]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <f_read+0x5a>
 80070c6:	2307      	movs	r3, #7
 80070c8:	e10d      	b.n	80072e6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	429a      	cmp	r2, r3
 80070dc:	f240 80fe 	bls.w	80072dc <f_read+0x26c>
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070e4:	e0fa      	b.n	80072dc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 80c6 	bne.w	8007280 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	0a5b      	lsrs	r3, r3, #9
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	8952      	ldrh	r2, [r2, #10]
 80070fe:	3a01      	subs	r2, #1
 8007100:	4013      	ands	r3, r2
 8007102:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d12f      	bne.n	800716a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d103      	bne.n	800711a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	633b      	str	r3, [r7, #48]	; 0x30
 8007118:	e013      	b.n	8007142 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	4619      	mov	r1, r3
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7fe fef9 	bl	8005f20 <clmt_clust>
 800712e:	6338      	str	r0, [r7, #48]	; 0x30
 8007130:	e007      	b.n	8007142 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fc5f 	bl	80059fe <get_fat>
 8007140:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d804      	bhi.n	8007152 <f_read+0xe2>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2202      	movs	r2, #2
 800714c:	755a      	strb	r2, [r3, #21]
 800714e:	2302      	movs	r3, #2
 8007150:	e0c9      	b.n	80072e6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d104      	bne.n	8007164 <f_read+0xf4>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	755a      	strb	r2, [r3, #21]
 8007160:	2301      	movs	r3, #1
 8007162:	e0c0      	b.n	80072e6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007168:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f7fe fc24 	bl	80059c0 <clust2sect>
 8007178:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <f_read+0x11a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2202      	movs	r2, #2
 8007184:	755a      	strb	r2, [r3, #21]
 8007186:	2302      	movs	r3, #2
 8007188:	e0ad      	b.n	80072e6 <f_read+0x276>
			sect += csect;
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0a5b      	lsrs	r3, r3, #9
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d039      	beq.n	8007212 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	4413      	add	r3, r2
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	8952      	ldrh	r2, [r2, #10]
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d905      	bls.n	80071b8 <f_read+0x148>
					cc = fs->csize - csect;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	895b      	ldrh	r3, [r3, #10]
 80071b0:	461a      	mov	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	7858      	ldrb	r0, [r3, #1]
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071c2:	f7fe f853 	bl	800526c <disk_read>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <f_read+0x166>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	755a      	strb	r2, [r3, #21]
 80071d2:	2301      	movs	r3, #1
 80071d4:	e087      	b.n	80072e6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	7d1b      	ldrb	r3, [r3, #20]
 80071da:	b25b      	sxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da14      	bge.n	800720a <f_read+0x19a>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90d      	bls.n	800720a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	025b      	lsls	r3, r3, #9
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	18d0      	adds	r0, r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3330      	adds	r3, #48	; 0x30
 8007200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007204:	4619      	mov	r1, r3
 8007206:	f7fe f911 	bl	800542c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	025b      	lsls	r3, r3, #9
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007210:	e050      	b.n	80072b4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	429a      	cmp	r2, r3
 800721a:	d02e      	beq.n	800727a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	7d1b      	ldrb	r3, [r3, #20]
 8007220:	b25b      	sxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	da18      	bge.n	8007258 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	7858      	ldrb	r0, [r3, #1]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1a      	ldr	r2, [r3, #32]
 8007234:	2301      	movs	r3, #1
 8007236:	f7fe f839 	bl	80052ac <disk_write>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <f_read+0x1da>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	755a      	strb	r2, [r3, #21]
 8007246:	2301      	movs	r3, #1
 8007248:	e04d      	b.n	80072e6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7d1b      	ldrb	r3, [r3, #20]
 800724e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	7858      	ldrb	r0, [r3, #1]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007262:	2301      	movs	r3, #1
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	f7fe f801 	bl	800526c <disk_read>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <f_read+0x20a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	755a      	strb	r2, [r3, #21]
 8007276:	2301      	movs	r3, #1
 8007278:	e035      	b.n	80072e6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800728e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d901      	bls.n	800729a <f_read+0x22a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	4413      	add	r3, r2
 80072aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ac:	4619      	mov	r1, r3
 80072ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072b0:	f7fe f8bc 	bl	800542c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	4413      	add	r3, r2
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	699a      	ldr	r2, [r3, #24]
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	441a      	add	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	619a      	str	r2, [r3, #24]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	441a      	add	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f47f af01 	bne.w	80070e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3738      	adds	r7, #56	; 0x38
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f107 0208 	add.w	r2, r7, #8
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fc7c 	bl	8006bfc <validate>
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d168      	bne.n	80073e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7d1b      	ldrb	r3, [r3, #20]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d062      	beq.n	80073e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7d1b      	ldrb	r3, [r3, #20]
 800731e:	b25b      	sxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	da15      	bge.n	8007350 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	7858      	ldrb	r0, [r3, #1]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	2301      	movs	r3, #1
 8007334:	f7fd ffba 	bl	80052ac <disk_write>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <f_sync+0x54>
 800733e:	2301      	movs	r3, #1
 8007340:	e04f      	b.n	80073e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7d1b      	ldrb	r3, [r3, #20]
 8007346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007350:	f7fd fdb8 	bl	8004ec4 <get_fattime>
 8007354:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7fe fa92 	bl	8005888 <move_window>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d138      	bne.n	80073e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	330b      	adds	r3, #11
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	330b      	adds	r3, #11
 800737e:	f042 0220 	orr.w	r2, r2, #32
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	461a      	mov	r2, r3
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	f7fe ff9f 	bl	80062d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f103 021c 	add.w	r2, r3, #28
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe f816 	bl	80053d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3316      	adds	r3, #22
 80073ac:	6939      	ldr	r1, [r7, #16]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe f810 	bl	80053d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3312      	adds	r3, #18
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fd ffef 	bl	800539e <st_word>
					fs->wflag = 1;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2201      	movs	r2, #1
 80073c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fa8b 	bl	80058e4 <sync_fs>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7d1b      	ldrb	r3, [r3, #20]
 80073d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff ff7b 	bl	80072ee <f_sync>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d118      	bne.n	8007434 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f107 0208 	add.w	r2, r7, #8
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fbf6 	bl	8006bfc <validate>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10c      	bne.n	8007434 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe f98e 	bl	8005740 <dec_lock>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d102      	bne.n	8007434 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007456:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007458:	7a5b      	ldrb	r3, [r3, #9]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d131      	bne.n	80074c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007462:	7a5b      	ldrb	r3, [r3, #9]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 800746a:	2100      	movs	r1, #0
 800746c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800746e:	4b19      	ldr	r3, [pc, #100]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007470:	7a5b      	ldrb	r3, [r3, #9]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4a17      	ldr	r2, [pc, #92]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007480:	7a5b      	ldrb	r3, [r3, #9]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007488:	4413      	add	r3, r2
 800748a:	79fa      	ldrb	r2, [r7, #7]
 800748c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 8007490:	7a5b      	ldrb	r3, [r3, #9]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	b2d1      	uxtb	r1, r2
 8007498:	4a0e      	ldr	r2, [pc, #56]	; (80074d4 <FATFS_LinkDriverEx+0x94>)
 800749a:	7251      	strb	r1, [r2, #9]
 800749c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800749e:	7dbb      	ldrb	r3, [r7, #22]
 80074a0:	3330      	adds	r3, #48	; 0x30
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	3301      	adds	r3, #1
 80074ac:	223a      	movs	r2, #58	; 0x3a
 80074ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	3302      	adds	r3, #2
 80074b4:	222f      	movs	r2, #47	; 0x2f
 80074b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	3303      	adds	r3, #3
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	200005c4 	.word	0x200005c4

080074d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80074e2:	2200      	movs	r2, #0
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff ffaa 	bl	8007440 <FATFS_LinkDriverEx>
 80074ec:	4603      	mov	r3, r0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f000 f820 	bl	8007550 <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	0800766c 	.word	0x0800766c
 8007534:	0800766c 	.word	0x0800766c
 8007538:	0800766c 	.word	0x0800766c
 800753c:	08007670 	.word	0x08007670

08007540 <memset>:
 8007540:	4402      	add	r2, r0
 8007542:	4603      	mov	r3, r0
 8007544:	4293      	cmp	r3, r2
 8007546:	d100      	bne.n	800754a <memset+0xa>
 8007548:	4770      	bx	lr
 800754a:	f803 1b01 	strb.w	r1, [r3], #1
 800754e:	e7f9      	b.n	8007544 <memset+0x4>

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr
